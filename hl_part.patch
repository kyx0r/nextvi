diff --git a/led.c b/led.c
index 86215dc..f63fb08 100644
--- a/led.c
+++ b/led.c
@@ -123,7 +123,7 @@ else if (*chrs[o] == '\t') \
 
 #define led_out(out, n) \
 { \
-for (i = 0; i < cterm;) { \
+for (i = bmin; i < bmax;) { \
 	int att_new = 0; \
 	o = off[i]; \
 	if (o >= 0) { \
@@ -151,58 +151,93 @@ for (i = 0; i < cterm;) { \
 	att_old = att_new; \
 } sbufn_str(out, term_att(0)) } \
 
+#define LEDBACK 300
+#define LEDFORW 300
+
+#define off_comp(beg, end, term, ch) \
+
 /* render and highlight a line */
 void led_render(char *s0, int cbeg, int cend)
 {
 	if (!xled)
 		return;
 	sbuf *bsb;
-	int j, c, l, n, i = 0, o = 0, cterm = cend - cbeg;
+	int j, c = 0, l, n, i = 0, o = 0, cterm = cend - cbeg;
 	int att_old = 0, atti = 0;
 	char *bound = NULL;
+	int fcbeg = cbeg - LEDBACK < 0 ? 0 : cbeg - LEDBACK;
+	int fcend = cend + LEDFORW;
+	int fcterm = fcend - fcbeg; /* fake the render dimensions */
+	int bmin = -1;
+	int bmax = -1;
 	char **chrs;		/* chrs[i]: the i-th character in s1 */
-	int off[cterm+1];	/* off[i]: the character at screen position i */
-	int att[cterm+1];	/* att[i]: the attributes of i-th character */
-	int stt[cterm+1];	/* stt[i]: remap off indexes */
-	int ctt[cterm+1];	/* ctt[i]: cterm bound attrs */
+	int off[fcterm+1];	/* off[i]: the character at screen position i */
+	int att[fcterm+1];	/* att[i]: the attributes of i-th character */
+	int stt[fcterm+1];	/* stt[i]: remap off indexes */
+	int ctt[fcterm+1];	/* ctt[i]: fcterm bound attrs */
 	int *pos = ren_position(s0, &chrs, &n);	/* pos[i]: the screen position of the i-th character */
 	int ctx = dir_context(s0);
-	memset(off, -1, (cterm+1) * sizeof(off[0]));
+	memset(off, -1, (fcterm+1) * sizeof(off[0]));
 	if (ctx < 0) {
 		for (; i < n; i++) {
-			int curbeg = cend - pos[i] - 1;
-			if (curbeg >= 0 && curbeg < cterm) {
+			int curbeg = fcend - pos[i] - 1;
+			if (curbeg >= 0 && curbeg < fcterm) {
 				int curwid = ren_cwid(chrs[i], pos[i]);
-				if (o + curwid > cterm)
+				if (o + curwid > fcterm)
 					break;
-				if (cend - (pos[i] + curwid - 1) - 1 < 0)
+				if (fcend - (pos[i] + curwid - 1) - 1 < 0)
 					continue;
 				o += curwid;
+				if (cend - pos[i] - 1 >= 0 && cend - pos[i-!!i] - 1 < cterm) {
+					if (i && cend - pos[i-1] - 1 < 0)
+						curwid = curwid > 1 ? 0 : curwid;
+					j = curwid - (cend - pos[i] - 1 - cterm) - 2;
+					l = (fcend - (pos[i] - 1) - 2);
+					if (bmin < 0)
+						bmin = l;
+					else
+						bmin = MIN(l, bmin);
+					bmax = MAX(fcend - (pos[i] + curwid - 1)+j, bmax);
+				}
 				while (--curwid >= 0)
-					off[cend - (pos[i] + curwid - 1) - 2] = i;
-				if (o == cterm)
+					off[fcend - (pos[i] + curwid - 1) - 2] = i;
+				if (o == fcterm)
 					break;
 			}
 		}
+		bmin = MAX(0, bmin - abs(bmax - bmin - cterm));
 	} else {
 		for (; i < n; i++) {
-			int curbeg = pos[i] - cbeg;
-			if (curbeg >= 0 && curbeg < cterm) {
+			int curbeg = pos[i] - fcbeg;
+			if (curbeg >= 0 && curbeg < fcterm) {
 				int curwid = ren_cwid(chrs[i], pos[i]);
-				if (o + curwid > cterm)
+				if (o + curwid > fcterm)
 					break;
-				if (curbeg + curwid > cterm)
+				if (curbeg + curwid > fcterm)
 					continue;
 				o += curwid;
+				if (pos[i+1] - cbeg >= 0 && pos[i] - cbeg < cterm) {
+					if (pos[i] - cbeg + curwid >= cterm)
+						curwid = curwid > 1 ? 0 : curwid;
+					if (bmin < 0)
+						bmin = curbeg + abs(pos[i] - cbeg);
+					else
+						bmin = MIN(curbeg + abs(pos[i] - cbeg), bmin);
+					bmax = MAX(curbeg + curwid, bmax);
+					if (pos[i] - cbeg < 0)
+						curwid = abs(pos[i] - cbeg);
+				}
 				while (--curwid >= 0)
 					off[curbeg + curwid] = i;
-				if (o == cterm)
+				if (o == fcterm)
 					break;
 			}
 		}
 	}
 	if (pos[n] > cterm || cbeg) {
-		for (i = 0, c = 0; i < cterm;) {
+		for (i = 0, c = 0; i < fcterm;) {
+			if (i == bmin)
+				atti = c;
 			o = off[i++];
 			if (o >= 0) {
 				att[c++] = o;
@@ -229,13 +264,13 @@ void led_render(char *s0, int cbeg, int cend)
 		sbuf_set(bsb, '\0', 4)
 		bound = bsb->s;
 	}
-	memset(att, 0, MIN(n, cterm) * sizeof(att[0]));
+	memset(att, 0, MIN(n, fcterm) * sizeof(att[0]));
 	if (xhl)
-		syn_highlight(att, bound ? bound : s0, MIN(n, cterm));
+		syn_highlight(att, bound ? bound : s0, MIN(n, fcterm));
 	if (bound)
 		sbuf_free(bsb);
 	if (xhlr) {
-		for (c = 0, i = 0; i < cterm;) {
+		for (c = 0, i = 0; i < fcterm;) {
 			o = off[i++];
 			if (o < 0)
 				continue;
