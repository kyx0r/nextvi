diff --git a/ex.c b/ex.c
index 05fb5a0..800d886 100644
--- a/ex.c
+++ b/ex.c
@@ -203,11 +203,13 @@ static char *ex_pathexpand(char *src)
 /* set the current search keyword rset if the kwd or flags changed */
 void ex_krsset(char *kwd, int dir)
 {
-	char *reg = vi_regget('/', &(int){0});
+	int lnmode = 0;
+	char *pat = {kwd};
+	char *reg = vi_regget('/', &lnmode);
 	if (kwd && *kwd && ((!reg || !xkwdrs || strcmp(kwd, reg))
 		|| ((xkwdrs->regex->flg & REG_ICASE) != xic))) {
 		rset_free(xkwdrs);
-		xkwdrs = rset_make(1, (char*[]){kwd}, xic ? REG_ICASE : 0);
+		xkwdrs = rset_make(1, &pat, xic ? REG_ICASE : 0);
 		xkwdcnt++;
 		vi_regputraw('/', kwd, 0, 0);
 		xkwddir = dir;
@@ -801,7 +803,7 @@ static int ec_glob(char *loc, char *cmd, char *arg)
 	not = strchr(cmd, '!') || cmd[0] == 'v';
 	pat = re_read(&s);
 	if (pat)
-		rs = rset_make(1, (char*[]){pat}, xic ? REG_ICASE : 0);
+		rs = rset_make(1, &pat, xic ? REG_ICASE : 0);
 	free(pat);
 	if (!pat || !rs)
 		return 1;
@@ -949,9 +951,10 @@ static int ec_chdir(char *loc, char *cmd, char *arg)
 
 static int ec_setincl(char *loc, char *cmd, char *arg)
 {
+	char *pat = {arg};
 	rset_free(fsincl);
 	if (*arg)
-		fsincl = rset_make(1, (char*[]){arg}, xic ? REG_ICASE : 0);
+		fsincl = rset_make(1, &pat, xic ? REG_ICASE : 0);
 	else
 		fsincl = NULL;
 	return 0;
diff --git a/led.c b/led.c
index 41cff99..131c4d3 100644
--- a/led.c
+++ b/led.c
@@ -46,7 +46,8 @@ static void file_index(struct lbuf *buf)
 	int ln_n = lbuf_len(buf);
 	int subs[grp], n;
 	sbuf *ibuf;
-	rset *rs = rset_make(1, (char*[]){xacreg ? xacreg->s : reg}, xic ? REG_ICASE : 0);
+	char *pat = {xacreg ? xacreg->s : reg};
+	rset *rs = rset_make(1, &pat, xic ? REG_ICASE : 0);
 	if (!rs)
 		return;
 	sbuf_make(ibuf, 1024)
@@ -294,10 +295,11 @@ static void led_printparts(sbuf *sb, int ps, char *post)
 		return;
 	int off, pos, psn = sb->s_n;
 	int idir = 0, next = sb->s[ps];
+	char **c = {NULL};
 	sbuf_str(sb, post)
 	sbuf_set(sb, '\0', 4)
 	rstate->ren_laststr = NULL;
-	ren_position(sb->s+ps, &(char**){NULL}, &off);
+	ren_position(sb->s+ps, &c, &off);
 	off -= uc_slen(post);
 	pos = ren_cursor(sb->s+ps, ren_pos(sb->s+ps, MAX(0, off - 1)));
 	if (pos >= xleft + xcols)
diff --git a/uc.c b/uc.c
index 058f00b..d09b12b 100644
--- a/uc.c
+++ b/uc.c
@@ -109,6 +109,13 @@ char *uc_subl(char *s, int beg, int end, int *rlen)
 	return r;
 }
 
+char *uc_sub(char *s, int beg, int end)
+{
+	int rlen = 0;
+
+	return uc_subl(s, beg, end, &rlen);
+}
+
 char *uc_dup(const char *s)
 {
 	char *r = emalloc(strlen(s) + 1);
diff --git a/vi.h b/vi.h
index 4b8435f..d22bb53 100644
--- a/vi.h
+++ b/vi.h
@@ -219,7 +219,7 @@ int uc_wid(int c);
 int uc_slen(char *s);
 char *uc_chr(char *s, int off);
 int uc_off(char *s, int off);
-#define uc_sub(s, beg, end) uc_subl(s, beg, end, &(int){0})
+char *uc_sub(char *s, int beg, int end);
 char *uc_subl(char *s, int beg, int end, int *rlen);
 char *uc_dup(const char *s);
 int uc_isspace(char *s);
