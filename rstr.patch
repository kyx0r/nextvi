diff --git a/ex.c b/ex.c
index 8acbc66..7643a88 100644
--- a/ex.c
+++ b/ex.c
@@ -27,7 +27,7 @@ struct buf *ex_buf;		/* current buffer */
 struct buf *ex_pbuf;		/* prev buffer */
 static struct buf *ex_tpbuf;	/* temp prev buffer */
 sbuf *xacreg;			/* autocomplete db filter regex */
-rset *xkwdrs;			/* the last searched keyword rset */
+rstr *xkwdrs;			/* the last searched keyword rstr */
 int xkwddir;			/* the last search direction */
 int xmpt;			/* whether to prompt after printing > 1 lines in vi */
 char *xregs[256];		/* string registers */
@@ -206,9 +206,9 @@ void ex_krsset(char *kwd, int dir)
 {
 	char *reg = xregs['/'];
 	if (kwd && *kwd && ((!reg || !xkwdrs || strcmp(kwd, reg))
-		|| ((xkwdrs->regex->flg & REG_ICASE) != xic))) {
-		rset_free(xkwdrs);
-		xkwdrs = rset_make(1, (char*[]){kwd}, xic ? REG_ICASE : 0);
+		|| (xkwdrs->icase != xic))) {
+		rstr_free(xkwdrs);
+		xkwdrs = rstr_make(kwd, xic ? REG_ICASE : 0);
 		xkwdcnt++;
 		vi_regputraw('/', kwd, 0, 0);
 		xkwddir = dir;
@@ -719,11 +719,11 @@ static int ec_substitute(char *loc, char *cmd, char *arg)
 	free(rep);
 	if (!xkwdrs)
 		return 1;
-	int offs[xkwdrs->grpcnt * 2];
+	int offs[xkwdrs->rs ? xkwdrs->rs->grpcnt * 2 : 2];
 	for (i = beg; i < end; i++) {
 		char *ln = lbuf_get(xb, i);
 		sbuf *r = NULL;
-		while (rset_find(xkwdrs, ln, offs, REG_NEWLINE) >= 0) {
+		while (rstr_find(xkwdrs, ln, offs, REG_NEWLINE) >= 0) {
 			if (offs[xgrp] < 0) {
 				ln += offs[1] > 0 ? offs[1] : 1;
 				continue;
@@ -800,7 +800,7 @@ static int ec_glob(char *loc, char *cmd, char *arg)
 	int beg, end, not;
 	char *pat, *s = arg;
 	int i;
-	rset *rs;
+	rstr *rs;
 	if (!loc[0] && !xgdep)
 		loc = "%";
 	if (ex_region(loc, &beg, &end))
@@ -808,7 +808,7 @@ static int ec_glob(char *loc, char *cmd, char *arg)
 	not = strchr(cmd, '!') || cmd[0] == 'v';
 	pat = re_read(&s);
 	if (pat)
-		rs = rset_make(1, (char*[]){pat}, xic ? REG_ICASE : 0);
+		rs = rstr_make(pat, xic ? REG_ICASE : 0);
 	free(pat);
 	if (!pat || !rs)
 		return 1;
@@ -818,7 +818,7 @@ static int ec_glob(char *loc, char *cmd, char *arg)
 	i = beg;
 	while (i < lbuf_len(xb)) {
 		char *ln = lbuf_get(xb, i);
-		if ((rset_find(rs, ln, NULL, REG_NEWLINE) < 0) == not) {
+		if ((rstr_find(rs, ln, NULL, REG_NEWLINE) < 0) == not) {
 			xrow = i;
 			if (ex_exec(s))
 				break;
@@ -829,7 +829,7 @@ static int ec_glob(char *loc, char *cmd, char *arg)
 	}
 	for (i = 0; i < lbuf_len(xb); i++)
 		lbuf_globget(xb, i, xgdep);
-	rset_free(rs);
+	rstr_free(rs);
 	xgdep--;
 	return 0;
 }
@@ -957,9 +957,9 @@ static int ec_chdir(char *loc, char *cmd, char *arg)
 
 static int ec_setincl(char *loc, char *cmd, char *arg)
 {
-	rset_free(fsincl);
+	rstr_free(fsincl);
 	if (*arg)
-		fsincl = rset_make(1, (char*[]){arg}, xic ? REG_ICASE : 0);
+		fsincl = rstr_make(arg, xic ? REG_ICASE : 0);
 	else
 		fsincl = NULL;
 	return 0;
diff --git a/lbuf.c b/lbuf.c
index 65210df..f26041d 100644
--- a/lbuf.c
+++ b/lbuf.c
@@ -427,16 +427,16 @@ int lbuf_findchar(struct lbuf *lb, char *cs, int cmd, int n, int *row, int *off)
 	return n != 0;
 }
 
-int lbuf_search(struct lbuf *lb, rset *re, int dir, int *r,
+int lbuf_search(struct lbuf *lb, rstr *re, int dir, int *r,
 			int ln_n, int *o, int *len, int skip)
 {
 	int r0 = *r, o0 = *o;
-	int offs[re->grpcnt * 2], i = r0;
+	int offs[re->rs ? re->rs->grpcnt * 2 : 2], i = r0;
 	char *s = lbuf_get(lb, i);
 	int off = skip > 0 && *uc_chr(s, o0 + 1) ? uc_chr(s, o0 + 1) - s : 0;
 	for (; i >= 0 && i < ln_n; i += dir) {
 		s = lb->ln[i];
-		while (rset_find(re, s + off, offs,
+		while (rstr_find(re, s + off, offs,
 				off ? REG_NOTBOL | REG_NEWLINE : REG_NEWLINE) >= 0) {
 			int g1 = offs[xgrp], g2 = offs[xgrp + 1];
 			if (g1 < 0) {
diff --git a/regex.c b/regex.c
index 9d9877a..13ae7be 100644
--- a/regex.c
+++ b/regex.c
@@ -659,3 +659,126 @@ char *re_read(char **src)
 	*src = *s ? s + 1 : s;
 	sbufn_done(sb)
 }
+
+/* return zero if a simple pattern is given */
+static int rstr_simple(rstr *rs, char *re, int icase)
+{
+	char *beg;
+	char *end;
+	if (!strcmp(re, "^$"))
+		return 1;
+	rs->lbeg = re[0] == '^';
+	if (rs->lbeg)
+		re++;
+	rs->wbeg = re[0] == '\\' && re[1] == '<';
+	if (rs->wbeg)
+		re += 2;
+	beg = re;
+	while (re[0] && !strchr("\\.*+?[]{}()$", (unsigned char) re[0]))
+		re++;
+	end = re;
+	rs->wend = re[0] == '\\' && re[1] == '>';
+	if (rs->wend)
+		re += 2;
+	rs->lend = re[0] == '$';
+	if (rs->lend)
+		re++;
+	if (!re[0]) {
+		int len = end - beg;
+		rs->len = len;
+		rs->str = emalloc(len + 1);
+		rs->str[len] = '\0';
+		if (icase) {
+			while (--len >= 0)
+				rs->str[len] = tolower((unsigned char)beg[len]);
+		} else
+			memcpy(rs->str, beg, len);
+		return 0;
+	}
+	return 1;
+}
+
+rstr *rstr_make(char *re, int flg)
+{
+	rstr *rs = emalloc(sizeof(*rs));
+	memset(rs, 0, sizeof(*rs));
+	rs->icase = flg & REG_ICASE;
+	if (rstr_simple(rs, re, rs->icase))
+		rs->rs = rset_make(1, &re, flg);
+	if (!rs->rs && !rs->str) {
+		free(rs);
+		return NULL;
+	}
+	return rs;
+}
+
+#define rstr_match(gen, wbeg, wend, cmpcase) \
+wbeg wend \
+m = rs->str; t = r; \
+for (; *m && *t; t++, m++) { \
+	if (cmpcase) \
+		goto break##gen; \
+} \
+if (!*m) { \
+	if (grps) { \
+		grps[0] = r - s; \
+		grps[1] = r - s + len; \
+	} \
+	return 0; \
+} \
+break##gen:; \
+
+#define rstr_match1(gen, wbeg, wend, cmpcase) \
+{ for (r = beg; r <= end; r++) { \
+	rstr_match(2##gen, wbeg, wend, cmpcase) \
+} } \
+
+#define _wbeg if (r > s && (isword(r - 1) || !isword(r))) continue;
+#define _wend if (r[len] && (!isword(r + len - 1) || isword(r + len))) continue;
+
+#define template(gen, cmpcase) \
+if (!rs->wbeg && !rs->wend) \
+	rstr_match1(1##gen, /*nop*/, /*nop*/, cmpcase) \
+else if (rs->wbeg && !rs->wend) \
+	rstr_match1(2##gen, _wbeg, /*nop*/, cmpcase) \
+else if (!rs->wbeg && rs->wend) \
+	rstr_match1(3##gen, /*nop*/, _wend, cmpcase) \
+else \
+	rstr_match1(4##gen, _wbeg, _wend, cmpcase) \
+
+/* return zero if an occurrence is found */
+int rstr_find(rstr *rs, char *s, int *grps, int flg)
+{
+	int len;
+	char *beg, *end, *r, *t, *m;
+	if (rs->rs)
+		return rset_find(rs->rs, s, grps, flg);
+	if ((rs->lbeg && (flg & REG_NOTBOL)) || (rs->lend && (flg & REG_NOTEOL)))
+		return -1;
+	if (!*s)
+		return -1;
+	len = rs->len;
+	beg = s;
+	end = s + strlen(s) - len - (flg & REG_NEWLINE ? 1 : 0);
+	if (end < beg)
+		return -1;
+	if (rs->lend)
+		beg = end;
+	if (rs->lbeg)
+		end = s;
+	if (!rs->icase) {
+		template(3, *t != *m)
+	} else {
+		template(4, tolower((unsigned char) *t) != *m)
+	}
+	return -1;
+}
+
+void rstr_free(rstr *rs)
+{
+	if (!rs)
+		return;
+	rset_free(rs->rs);
+	free(rs->str);
+	free(rs);
+}
diff --git a/vi.c b/vi.c
index 869b920..016c902 100644
--- a/vi.c
+++ b/vi.c
@@ -592,7 +592,7 @@ void vi_regput(int c, const char *s, int ln)
 	vi_regputraw(c, s, ln, isupper(c));
 }
 
-rset *fsincl;
+rstr *fsincl;
 char *fs_exdir;
 static int fspos;
 static int fsdir;
@@ -610,7 +610,7 @@ static char *file_calc(char *path)
 		len = strlen(dp->d_name)+1;
 		path[pathlen] = '/';
 		memcpy(&path[pathlen+1], dp->d_name, len);
-		if (fsincl && rset_find(fsincl, path, NULL, 0) < 0)
+		if (fsincl && rstr_find(fsincl, path, NULL, 0) < 0)
 			continue;
 		if (lstat(path, &statbuf) >= 0 && S_ISREG(statbuf.st_mode))
 			temp_write(1, path);
diff --git a/vi.h b/vi.h
index 1d23d99..1a9f189 100644
--- a/vi.h
+++ b/vi.h
@@ -115,10 +115,21 @@ typedef struct {
 	int *setgrpcnt;		/* number of groups in each regular expression */
 	int grpcnt;		/* group count */
 } rset;
+typedef struct {
+	rset *rs;		/* only for regex patterns */
+	char *str;		/* for simple, non-regex patterns  */
+	int len;		/* str length */
+	int icase;		/* ignore case */
+	int lbeg, lend;		/* match line beg/end */
+	int wbeg, wend;		/* match word beg/end */
+} rstr;
 rset *rset_make(int n, char **pat, int flg);
 int rset_find(rset *re, char *s, int *grps, int flg);
 void rset_free(rset *re);
 char *re_read(char **src);
+rstr *rstr_make(char *re, int flg);
+int rstr_find(rstr *rs, char *s, int *grps, int flg);
+void rstr_free(rstr *rs);
 
 /* lbuf.c line buffer, managing a number of lines */
 #define lbuf_slen(ln) *(int*)(ln - sizeof(int))
@@ -144,7 +155,7 @@ int lbuf_eol(struct lbuf *lb, int r);
 void lbuf_globset(struct lbuf *lb, int pos, int dep);
 int lbuf_globget(struct lbuf *lb, int pos, int dep);
 int lbuf_findchar(struct lbuf *lb, char *cs, int cmd, int n, int *r, int *o);
-int lbuf_search(struct lbuf *lb, rset *re, int dir, int *r,
+int lbuf_search(struct lbuf *lb, rstr *re, int dir, int *r,
 			int ln_n, int *o, int *len, int skip);
 /* motions */
 int lbuf_paragraphbeg(struct lbuf *lb, int dir, int *row, int *off);
@@ -347,7 +358,7 @@ void ex_cprint(char *line, int r, int c, int ln);
 #define ex_print(line) ex_cprint(line, -1, 0, 1)
 void ex_init(char **files, int n);
 void ex_bufpostfix(struct buf *p, int clear);
-int ex_krs(rset **krs, int *dir);
+int ex_krs(rstr **krs, int *dir);
 void ex_krsset(char *kwd, int dir);
 int ex_edit(const char *path, int len);
 void ec_bufferi(int id);
@@ -441,9 +452,9 @@ extern int xpac;
 extern int xkwdcnt;
 extern int xkwddir;
 extern int xmpt;
-extern rset *xkwdrs;
+extern rstr *xkwdrs;
 extern sbuf *xacreg;
-extern rset *fsincl;
+extern rstr *fsincl;
 extern char *fs_exdir;
 extern int vi_hidch;
 extern int vi_insmov;
