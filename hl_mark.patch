diff --git a/ex.c b/ex.c
index ce358db..5040cf3 100644
--- a/ex.c
+++ b/ex.c
@@ -9,6 +9,7 @@ int xhll;			/* highlight current line */
 int xhlw;			/* highlight current word */
 int xhlp;			/* highlight {}[]() pair */
 int xhlr;			/* highlight text in reverse direction */
+int xhlm;			/* highlight marks */
 int xled = 1;			/* use the line editor */
 int xtd = +1;			/* current text direction */
 int xshape = 1;			/* perform letter shaping */
@@ -892,6 +893,7 @@ static struct option {
 	{"hlw", &xhlw},
 	{"hlp", &xhlp},
 	{"hlr", &xhlr},
+	{"hlm", &xhlm},
 	{"tbs", &xtabspc},
 	{"ish", &xish},
 	{"grp", &xgrp},
diff --git a/led.c b/led.c
index 1dda5b5..3f95c5f 100644
--- a/led.c
+++ b/led.c
@@ -109,6 +109,22 @@ static int led_offdir(char **chrs, int *pos, int i)
 	return 0;
 }
 
+static void led_hlmark(int *att, int row, int cterm)
+{
+	int mrow = -1, moff, icol = 0;
+	char marks[] = "abcdefghijklmnopqrstuvwxyz[]`'";
+	for (int i = 0; i < LEN(marks); icol++, i++) {
+		if (lbuf_jump(xb, marks[i], &mrow, &moff) || mrow != row)
+			continue;
+		if (icol > 15) /* wrap for only 16 color term */
+			icol = 0;
+		while (moff > cterm)
+			moff -= cterm;
+		att[moff] = SYN_BGMK(icol+1);
+		mrow = -1;
+	}
+}
+
 #define print_ch1(out) sbuf_mem(out, chrs[o], l)
 #define print_ch2(out) sbuf_mem(out, *chrs[o] == ' ' ? "_" : chrs[o], l)
 
@@ -152,7 +168,7 @@ for (i = 0; i < cterm;) { \
 } sbufn_str(out, term_att(0)) } \
 
 /* render and highlight a line */
-void led_render(char *s0, int cbeg, int cend)
+void led_render(char *s0, int cbeg, int cend, int row)
 {
 	if (!xled)
 		return;
@@ -247,6 +263,8 @@ void led_render(char *s0, int cbeg, int cend)
 			att[j+1] = syn_merge(conf_hlrev, att[j+1]);
 		}
 	}
+	if (xhlm && row >= 0)
+		led_hlmark(att, row+xtop, cterm);
 	/* generate term output */
 	if (vi_hidch)
 		led_out(term_sbuf, 2)
diff --git a/vi.h b/vi.h
index 0ed11e0..97c78ba 100644
--- a/vi.h
+++ b/vi.h
@@ -299,14 +299,14 @@ char *xgetenv(char* q[]);
 /* led.c line-oriented input and output */
 char *led_prompt(char *pref, char *post, char *insert, int *kmap);
 sbuf *led_input(char *pref, char **post, int row, int lsh);
-void led_render(char *s0, int cbeg, int cend);
+void led_render(char *s0, int cbeg, int cend, int row);
 #define _led_render(msg, row, col, beg, end, kill) \
 { \
 	int record = term_record; \
 	term_record = 1; \
 	term_pos(row, col); \
 	kill \
-	led_render(msg, beg, end); \
+	led_render(msg, beg, end, row); \
 	if (!record) \
 		term_commit(); \
 } \
