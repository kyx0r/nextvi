diff --git a/led.c b/led.c
index 7a124730..cc2bd70d 100644
--- a/led.c
+++ b/led.c
@@ -117,7 +117,7 @@ for (i = 0; i < cterm;) { \
 	o = off[i]; \
 	if (o >= 0) { \
 		for (l = i; off[i] == o; i++); \
-		att_new = att[bound ? ctt[atti++] : o]; \
+		att_new = att[o]; \
 		if (att_new != att_old) \
 			sbuf_str(out, term_att(att_new)) \
 		char *s = ren_translate(chrs[o], s0); \
@@ -148,13 +148,11 @@ void led_render(char *s0, int cbeg, int cend)
 		return;
 	ren_state *r = ren_position(s0);
 	int j, c, l, i, o, n = r->n;
-	int att_old = 0, atti = 0, cterm = cend - cbeg;
-	char *bound = NULL;
+	int att_old = 0, cterm = cend - cbeg;
 	char **chrs = r->chrs;	/* chrs[i]: the i-th character in s0 */
 	int off[cterm+1];	/* off[i]: the character at screen position i */
-	int att[cterm+1];	/* att[i]: the attributes of i-th character */
-	int stt[cterm+1];	/* stt[i]: remap off indexes */
-	int ctt[cterm+1];	/* ctt[i]: cterm bound attrs */
+	int *att = emalloc(n * sizeof(att[0]));
+	memset(att, 0, n * sizeof(att[0]));
 	int ctx = r->ctx;
 	off[cterm] = -1;
 	if (ctx < 0) {
@@ -165,72 +163,14 @@ void led_render(char *s0, int cbeg, int cend)
 		for (c = cbeg; c < cend; c++)
 			off[c - cbeg] = c <= r->cmax ? r->col[c] : -1;
 	}
-	if (r->cmax > cterm || cbeg) {
-		i = ctx < 0 ? cterm-1 : 0;
-		o = off[i];
-		if (o >= 0 && cbeg && r->pos[o] < cbeg)
-			while (off[i] == o)
-				off[ctx < 0 ? i-- : i++] = -1;
-		i = ctx < 0 ? 0 : cterm-1;
-		o = off[i];
-		if (o >= 0 && r->cmax > cterm && r->pos[o] + r->wid[o] > cend)
-			while (off[i] == o)
-				off[ctx < 0 ? i++ : i--] = -1;
-		for (i = 0, c = 0; i < cterm;) {
-			if ((o = off[i++]) >= 0) {
-				att[c++] = o;
-				for (; off[i] == o; i++);
-			}
-		}
-		stt[0] = 0;
-		for (i = 1; i < c; i++) {
-			int key0 = att[i];
-			j = i - 1;
-			while (j >= 0 && att[j] > key0) {
-				att[j + 1] = att[j];
-				stt[j + 1] = stt[j];
-				j = j - 1;
-			}
-			att[j + 1] = key0;
-			stt[j + 1] = i;
-		}
-		sbuf_smake(bsb, cterm*4);
-		for (i = 0; i < c; i++) {
-			ctt[stt[i]] = i;
-			stt[i] = att[i];
-			sbuf_mem(bsb, chrs[att[i]], uc_len(chrs[att[i]]))
-		}
-		sbuf_set(bsb, '\0', 4)
-		bound = bsb->s;
-	}
-	memset(att, 0, MIN(n, cterm+1) * sizeof(att[0]));
 	if (xhl)
-		syn_highlight(att, bound ? bound : s0, MIN(n, cterm));
-	free(bound);
+		syn_highlight(att, s0, n);
 	if (led_attsb && xhl) {
 		led_att *p = (led_att*)led_attsb->s;
 		for (; (char*)p < &led_attsb->s[led_attsb->s_n]; p++) {
 			if (p->s != s0)
 				continue;
-			if (!bound)
-				att[p->off] = syn_merge(p->att, att[p->off]);
-			else if (c && stt[0] <= p->off && stt[c-1] >= p->off) {
-				i = p->off - stt[0];
-				if (i < c && stt[i] == p->off) {
-					att[i] = syn_merge(p->att, att[i]);
-					continue; /* text not reordered */
-				}
-				for (l = 0, j = c - 1; l <= j;) {
-					i = l + (j - l) / 2;
-					if (stt[i] == p->off) {
-						att[i] = syn_merge(p->att, att[i]);
-						break;
-					} else if (stt[i] < p->off)
-						l = i + 1;
-					else
-						j = i - 1;
-				}
-			}
+			att[p->off] = syn_merge(p->att, att[p->off]);
 		}
 	}
 	if (xhlr && xhl) {
@@ -243,7 +183,7 @@ void led_render(char *s0, int cbeg, int cend)
 				continue;
 			if (r->pos[o + 1] + r->wid[o + 1] != r->pos[o])
 				continue;
-			j = bound ? ctt[l-1] : o;
+			j = o;
 			att[j] = syn_merge(conf_hlrev, att[j]);
 			att[j+1] = syn_merge(conf_hlrev, att[j+1]);
 		}
