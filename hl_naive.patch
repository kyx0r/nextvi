diff --git a/led.c b/led.c
index abf62fd..0a1f1ed 100644
--- a/led.c
+++ b/led.c
@@ -128,7 +128,7 @@ for (i = 0; i < cterm;) { \
 	o = off[i]; \
 	if (o >= 0) { \
 		for (l = i; off[i] == o; i++); \
-		att_new = att[bound ? ctt[atti++] : o]; \
+		att_new = att[o]; \
 		if (att_new != att_old) \
 			sbuf_str(out, term_att(att_new)) \
 		char *s = ren_translate(chrs[o], s0); \
@@ -156,18 +156,17 @@ void led_render(char *s0, int cbeg, int cend)
 {
 	if (!xled)
 		return;
-	sbuf *bsb;
-	int j, c, l, n, i = 0, o = 0, cterm = cend - cbeg;
-	int att_old = 0, atti = 0;
-	char *bound = NULL;
+	int l, n, i = 0, o = 0, cterm = cend - cbeg;
+	int att_old = 0;
+	int *pos;		/* pos[i]: the screen position of the i-th character */
 	char **chrs;		/* chrs[i]: the i-th character in s1 */
 	int off[cterm+1];	/* off[i]: the character at screen position i */
-	int att[cterm+1];	/* att[i]: the attributes of i-th character */
-	int stt[cterm+1];	/* stt[i]: remap off indexes */
-	int ctt[cterm+1];	/* ctt[i]: cterm bound attrs */
-	int *pos = ren_position(s0, &chrs, &n);	/* pos[i]: the screen position of the i-th character */
+	int *att;		/* att[i]: the attributes of i-th character */
 	int ctx = dir_context(s0);
 	memset(off, -1, (cterm+1) * sizeof(off[0]));
+	pos = ren_position(s0, &chrs, &n);
+	att = &pos[n+1];
+	memset(att, 0, n * sizeof(att[0]));
 	if (ctx < 0) {
 		for (; i < n; i++) {
 			int curbeg = cend - pos[i] - 1;
@@ -201,50 +200,20 @@ void led_render(char *s0, int cbeg, int cend)
 			}
 		}
 	}
-	if (pos[n] > cterm || cbeg) {
-		for (i = 0, c = 0; i < cterm;) {
-			o = off[i++];
-			if (o >= 0) {
-				att[c++] = o;
-				for (; off[i] == o; i++);
-			}
-		}
-		stt[0] = 0;
-		for (i = 1; i < c; i++) {
-			int key0 = att[i];
-			j = i - 1;
-			while (j >= 0 && att[j] > key0) {
-				att[j + 1] = att[j];
-				stt[j + 1] = stt[j];
-				j = j - 1;
-			}
-			att[j + 1] = key0;
-			stt[j + 1] = i;
-		}
-		sbuf_make(bsb, cterm*4);
-		for (i = 0; i < c; i++) {
-			ctt[stt[i]] = i;
-			sbuf_mem(bsb, chrs[att[i]], uc_len(chrs[att[i]]))
-		}
-		sbuf_set(bsb, '\0', 4)
-		bound = bsb->s;
-	}
-	memset(att, 0, MIN(n, cterm) * sizeof(att[0]));
 	if (xhl)
-		syn_highlight(att, bound ? bound : s0, MIN(n, cterm));
-	if (bound)
-		sbuf_free(bsb);
+		syn_highlight(att, s0, n);
 	if (xhlr) {
-		for (c = 0, i = 0; i < cterm;) {
-			o = off[i++];
-			if (o < 0)
-				continue;
-			for (c++; off[i] == o; i++);
-			if (led_offdir(chrs, pos, o) >= 0)
-				continue;
-			j = bound ? ctt[c-1] : o;
-			att[j] = syn_merge(conf_hlrev(), att[j]);
-			att[j+1] = syn_merge(conf_hlrev(), att[j+1]);
+		int hl = conf_hlrev();
+		for (i = 0; i + 1 < n;) {
+			int dir = led_offdir(chrs, pos, i);
+			int beg = i;
+			while (i + 1 < n && led_offdir(chrs, pos, i) == dir)
+				i++;
+			if (dir < 0)
+				for (int j = beg; j <= i; j++)
+					att[j] = syn_merge(hl, att[j]);
+			if (i == beg)
+				i++;
 		}
 	}
 	/* generate term output */
