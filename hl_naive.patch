diff --git a/led.c b/led.c
index d6a0b36..76507d4 100644
--- a/led.c
+++ b/led.c
@@ -113,12 +113,10 @@ static int led_offdir(char **chrs, int *pos, int i)
 }
 
 /* highlight text in reverse direction */
-static void led_markrev(int n, int cterm, int *off, char **chrs, int *pos, int *att)
+static void led_markrev(int n, char **chrs, int *pos, int *att)
 {
 	int i = 0, j;
 	int hl = conf_hlrev();
-	int *ratt = malloc((n+1)*sizeof(int));
-	memset(ratt, 0, (n+1)*sizeof(int));
 	while (i + 1 < n) {
 		int dir = led_offdir(chrs, pos, i);
 		int beg = i;
@@ -126,20 +124,13 @@ static void led_markrev(int n, int cterm, int *off, char **chrs, int *pos, int *
 			i++;
 		if (dir < 0)
 			for (j = beg; j <= i; j++)
-				ratt[j] = hl;
+				att[j] = syn_merge(hl, att[j]);
 		if (i == beg)
 			i++;
 	}
-	for (j = 0, i = 0; i < cterm;) {
-		int o = off[i++];
-		if (o >= 0) {
-			att[j] = syn_merge(ratt[o], att[j]);
-			for (j++; off[i] == o; i++);
-		}
-	}
-	free(ratt);
 }
 
+#if 0
 static char *led_bounds(int *off, char **chrs, int cterm)
 {
 	int i = 0;
@@ -154,6 +145,7 @@ static char *led_bounds(int *off, char **chrs, int cterm)
 	}
 	sbufn_done(out)
 }
+#endif
 
 #define print_ch1(out) sbuf_mem(out, chrs[o], l)
 #define print_ch2(out) sbuf_mem(out, *chrs[o] == ' ' ? "_" : chrs[o], l)
@@ -174,7 +166,7 @@ for (i = 0; i < cterm;) { \
 	o = off[i]; \
 	if (o >= 0) { \
 		for (l = i; off[i] == o; i++); \
-		att_new = att[atti++]; \
+		att_new = att[o]; \
 		if (att_new != att_old) \
 			sbuf_str(out, term_att(att_new)) \
 		char *s = ren_translate(chrs[o], s0); \
@@ -203,16 +195,16 @@ void led_render(char *s0, int cbeg, int cend)
 	if (!xled)
 		return;
 	int l, n, i = 0, o = 0, cterm = cend - cbeg;
-	int att_old = 0, atti = 0;
-	char *bound = s0;
+	int att_old = 0;
 	int *pos;		/* pos[i]: the screen position of the i-th character */
 	char **chrs;		/* chrs[i]: the i-th character in s1 */
 	int off[cterm+1];	/* off[i]: the character at screen position i */
-	int att[cterm+1];	/* att[i]: the attributes of i-th character */
+	int *att;		/* att[i]: the attributes of i-th character */
 	int ctx = dir_context(s0);
 	memset(off, -1, (cterm+1) * sizeof(off[0]));
-	memset(att, 0, (cterm+1) * sizeof(att[0]));
 	pos = ren_position(s0, &chrs, &n);
+	att = &pos[n+1];
+	memset(att, 0, n * sizeof(att[0]));
 	if (ctx < 0) {
 		for (; i < n; i++) {
 			int curbeg = cend - pos[i] - 1;
@@ -246,14 +238,10 @@ void led_render(char *s0, int cbeg, int cend)
 			}
 		}
 	}
-	if (pos[n] > cterm || cbeg || ctx < 0)
-		bound = led_bounds(off, chrs, cterm);
 	if (xhl)
-		syn_highlight(att, bound, n < cterm ? n : cterm);
-	if (bound != s0)
-		free(bound);
+		syn_highlight(att, s0, n);
 	if (xhlr)
-		led_markrev(n, cterm, off, chrs, pos, att);
+		led_markrev(n, chrs, pos, att);
 	/* generate term output */
 	if (vi_hidch)
 		led_out(term_sbuf, 2)
