diff --git a/conf.c b/conf.c
index a3278fa9..361d6d94 100644
--- a/conf.c
+++ b/conf.c
@@ -247,6 +247,11 @@ q!?|reg|rd?|w[!q]?!?|u[czb]?|se?|x!?|ya!?|cm!?|cd?)?",
 	{"/ex", "\\\\(.)|(:)#", {8 | SYN_BD, 3, 12}},
 	{"/ex", "!(?:[^!\\\\]|\\\\.)*!?|[%#][0-9]*", {15 | SYN_BD}},
 
+	/* grep buffer */
+	/* I don't feel like making new ->func index so reuse 3 here */
+	{"/grep", "^(.+?):([0-9]+):(.+)", {5, 10, 6, 8}, {1, 0, 0, 1}},
+	{"/grep", NULL, {7 | SYN_BGMK(9)}, {0}, 0, 3},
+
 	/* status bar (is never '\n' terminated) */
 	{"/-", "^(\".*\").*(\\[[wrf]\\]).*$", {8 | SYN_BD, 4, 1}},
 	{"/-", "^<(.+)> [^ ]+ ([0-9]+L) ([0-9]+W) (S[0-9]+) (O[0-9]+) (C[0-9]+)$",
diff --git a/ex.c b/ex.c
index 78b6a8f0..519f9aef 100644
--- a/ex.c
+++ b/ex.c
@@ -23,7 +23,7 @@ int xkwdcnt;			/* number of search kwd changes */
 int xbufcur;			/* number of active buffers */
 int xgrec;			/* global vi/ex recursion depth */
 struct buf *bufs;		/* main buffers */
-struct buf tempbufs[2];		/* temporary buffers, for internal use */
+struct buf tempbufs[3];		/* temporary buffers, for internal use */
 struct buf *ex_buf;		/* current buffer */
 struct buf *ex_pbuf;		/* prev buffer */
 static struct buf *ex_tpbuf;	/* temp prev buffer */
diff --git a/vi.c b/vi.c
index d2fb5c35..62c97f8b 100644
--- a/vi.c
+++ b/vi.c
@@ -562,12 +562,12 @@ void dir_calc(char *path)
 	free(sb->s);
 }
 
-#define fssearch() \
+#define fssearch(isbuffer) \
 len = lbuf_s(path)->len; \
 path[len] = '\0'; \
 ret = ex_edit(path, len); \
 path[len] = '\n'; \
-if (ret && xrow) { \
+if (isbuffer) { \
 	*row = xrow; *off = xoff; /* short circuit */ \
 	if (!vi_search('n', cnt, row, off, 0)) \
 		return 1; \
@@ -578,14 +578,14 @@ if (ret && xrow) { \
 if (!vi_search(*row ? 'N' : 'n', cnt, row, off, 0)) \
 	return 1; \
 
-static int fs_search(int cnt, int *row, int *off)
+static int fs_search(int again, int cnt, int *row, int *off)
 {
 	char *path;
-	int again = 0, ret, len;
+	int ret, len;
 	wrap:
 	while (fspos < lbuf_len(tempbufs[1].lb)) {
 		path = tempbufs[1].lb->ln[fspos++];
-		fssearch()
+		fssearch(ret && xrow && again != 2)
 	}
 	if (fspos == lbuf_len(tempbufs[1].lb) && !again) {
 		fspos = 0;
@@ -601,7 +601,7 @@ static int fs_searchback(int cnt, int *row, int *off)
 	int ret, len;
 	while (--fspos >= 0) {
 		path = tempbufs[1].lb->ln[fspos];
-		fssearch()
+		fssearch(ret && xrow)
 	}
 	return 0;
 }
@@ -716,6 +716,7 @@ static int vi_motion(int *row, int *off)
 				break;
 		break;
 	case TK_CTL(']'):	/* note: this is also ^5 as per ascii */
+	case TK_CTL('x'):
 	case TK_CTL('p'):
 		#define open_saved(n) \
 		if (savepath[n]) { \
@@ -734,8 +735,44 @@ static int vi_motion(int *row, int *off)
 			lkwdcnt = xkwdcnt;
 			fspos += fsdir < 0 ? 1 : 0;
 			fspos = MIN(fspos, lbuf_len(tempbufs[1].lb));
-			fs_search(1, row, off);
+			fs_search(0, 1, row, off);
 			fsdir = 1;
+		} else if (mv == TK_CTL('x')) {
+			if (!strcmp(ex_path, "/grep/"))
+				temp_switch(2);
+			term_exec("", 1, '&')
+			temp_pos(2, -1, 0, 0);
+			sbuf *gstats; sbuf_make(gstats, 1024)
+			char nbuf[100];
+			int colpos = 0;
+			fspos = 0;
+			while (fs_search(2, 1, row, off)) {
+				sbuf_str(gstats, ex_path)
+				sbuf_chr(gstats, ':')
+				colpos = gstats->s_n;
+				#define nextrow() \
+				itoa((*row)+1, nbuf); \
+				sbuf_str(gstats, nbuf) \
+				sbuf_chr(gstats, ':') \
+				sbufn_str(gstats, lbuf_get(xb, *row)) \
+				temp_write(2, gstats->s); \
+				(*row)++; \
+
+				nextrow()
+				while (!vi_search('n', cnt, row, off, 0)) {
+					sbuf_cut(gstats, colpos)
+					nextrow()
+				}
+				sbuf_cut(gstats, 0)
+			}
+			sbuf_free(gstats)
+			for (i = xbufcur-1; i >= 0 && bufs[i].mtime == -1; i--)
+				ex_bufpostfix(&bufs[i], 1);
+			temp_switch(2);
+			lbuf_jump(xb, '[', row, off);
+			*off = 0;
+			syn_addhl(xregs['/'], 3, 1); /* see conf.c */
+			syn_reloadft();
 		} else {
 			fspos -= fsdir > 0 ? 1 : 0;
 			if (!fs_searchback(1, row, off)) {
@@ -1359,7 +1396,17 @@ void vi(int init)
 				char buf[strlen(ln)+4];
 				strcpy(buf, ":e ");
 				strcpy(buf+3, ln);
-				term_push(buf, strlen(ln)+3);
+				if (!strcmp(ex_path, "/grep/")) {
+					int subs[2];
+					rset *rs = rset_make(1, (char*[]){":[0-9]+:"}, 0);
+					if (rset_find(rs, buf, subs, 0) >= 0) {
+						buf[subs[0]] = xsep;
+						buf[subs[1]-1] = '\n';
+						buf[subs[1]] = '\0';
+					}
+					rset_free(rs);
+				}
+				term_push(buf, strlen(buf));
 				break; }
 			case TK_CTL('n'):
 				vi_cndir = vi_arg ? -vi_cndir : vi_cndir;
@@ -1519,6 +1566,10 @@ void vi(int init)
 					}
 					ln = vi_enprompt(":", buf, &n);
 					goto do_excmd; }
+				case 'x':
+					temp_switch(2);
+					vi_mod = 1;
+					break;
 				default:
 					term_dec()
 				}
@@ -1885,6 +1936,7 @@ int main(int argc, char *argv[])
 	syn_init();
 	temp_open(0, "/hist/", "/");
 	temp_open(1, "/fm/", "/fm");
+	temp_open(2, "/grep/", "/grep");
 	for (i = 1; i < argc && argv[i][0] == '-'; i++) {
 		if (argv[i][1] == '-' && !argv[i][2]) {
 			i++;
diff --git a/vi.h b/vi.h
index b6f6588a..ef0548ee 100644
--- a/vi.h
+++ b/vi.h
@@ -375,7 +375,7 @@ extern int xbufcur;
 extern struct buf *ex_buf;
 extern struct buf *ex_pbuf;
 extern struct buf *bufs;
-extern struct buf tempbufs[2];
+extern struct buf tempbufs[3];
 #define istempbuf(buf) (buf - bufs < 0 || buf - bufs >= xbufcur)
 #define ex_path ex_buf->path
 #define ex_ft ex_buf->ft
