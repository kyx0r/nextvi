Nextvi(1)		    General Commands Manual		     Nextvi(1)

NAME
     Nextvi â€“ A small vi/ex editor for editing bidirectional UTF-8 text

SYNOPSIS
     vi [-emsv] [file ...]

DESCRIPTION
     Nextvi is a vi(1)-like text editor based on Ali Gholami Rudi's Neatvi(1).
     VI is a legendary command-line text editor, first introduced by Bill Joy
     in 1976, renowned for its modal interface, which allows users to switch
     between insert, command, and visual modes for seamless text manipulation.
     This powerful and efficient editor has stood the test of time, remaining
     a staple tool for developers and system administrators in Unix and Linux
     environments, thanks to its flexibility, customization options, and
     syntax similar to other vi/ex editors. To mark its 50th anniversary,
     Nextvi emerges as the pinnacle of VI's evolution. This masterpiece of
     efficiency and elegance boasts unparalleled startup speed, unmatched
     portability, exceptional hackability, and an incredibly robust macro
     system, among other features. Nextvi is truly the next generation of VI,
     ready to elevate your text editing experience.

OPTIONS
     -e	     Enter Ex mode on startup
     -m	     Disable initial file read message
     -s	     When combined with -e enters limited Ex mode
     -v	     Enter visual mode on startup. (Default)

NOTATION
     arg1-   An optional number prefixing a command
     -arg2   A required argument suffixing a command
     C-	     A ctrl key
     Space   A separation, multiple binds to the same command
     <^x>    A representation of non-printable character literal x

VI NORMAL
     arg1-+ arg1-\n arg1-j
		   Move the cursor arg1 lines down
     arg1-- arg1-k
		   Move the cursor arg1 lines up
     arg1-h	   Move the cursor arg1 cols left
     arg1-l	   Move the cursor arg1 cols right
     f-arg2	   Move the cursor to the arg2 character found forward
     F-arg2	   Move the cursor to the arg2 character found backward
     t-arg2	   Move the cursor until the arg2 character found forward
     T-arg2	   Move the cursor until the arg2 character found backward
     arg1-,	   Repeat last f or F or t or F command backward arg1 times
     arg1-;	   Repeat last f or F or t or F command forward arg1 times
     arg1-B	   Move the cursor to the end of the word skipping punctuation
		   backward arg1 times
     arg1-E	   Move the cursor to the end of the word skipping punctuation
		   forward arg1 times
     arg1-b	   Move the cursor to the end of the word backward arg1 times
     arg1-e	   Move the cursor to the end of the word forward arg1 times
     arg1-W	   Move the cursor to the start of the word skipping
		   punctuation forward arg1 times
     arg1-w	   Move the cursor to the start of the word forward arg1 times
     {		   Move the cursor to the next { region up
     }		   Move the cursor to the next { region down
     [		   Move the cursor to the next \n region up
     ]		   Move the cursor to the next \n region down
     ^		   Move the cursor to the start of the line after indentation
     0 |	   Move the cursor to the start of the line.
     $		   Move the cursor to the eol
     arg1-|	   Move the cursor to arg1 col
     arg1-Space	   Move cursor arg1 characters forward
     arg1-C-h arg1-Backspace
		   Move cursor arg1 characters backward
     %		   Move the cursor to [](){} pair
     arg1-%	   Move the cursor to the arg1 percent line number
     '-arg2	   Goto a line mark arg2
     `-arg2	   Goto a line mark arg2 with horizontal position
     gg		   Goto the first line in the buffer
     arg1-G	   Goto the last line in the buffer or arg1 line
     H		   Goto the highest line of the screen
     L		   Goto the lowest line of the screen
     M		   Goto the middle line of the screen
     arg1-z.	   Center the screen. arg1 is xtop
     arg1-z\n	   Center the screen at top row. arg1 is xtop
     arg1-z-	   Center the screen at bottom row. arg1 is xtop
     arg1-C-e	   Scroll down 1 or arg1 lines. arg1 is set and stored, cursor
		   position preserved
     arg1-C-y	   Scroll up 1 or arg1 lines. arg1 is set and stored, cursor
		   position preserved
     arg1-C-d	   Scroll down half a screen size. If arg1 set scroll to arg1
		   lines
     arg1-C-u	   Scroll up half a screen size. If arg1 set scroll to arg1
		   lines
     C-b	   Scroll up full screen size
     C-f	   Scroll down full screen size
     #		   Show global and relative line numbers
     2#		   Toggle show global line numbers permanently
     4#		   Toggle show relative line numbers after indentation
		   permanently
     8#		   Toggle show relative line numbers permanently
     V		   Toggle show hidden characters: Space,Tab,New line
     C-v	   Toggle show line motion numbers for ebEBwW
     arg1-C-v	   Disable line motion numbers
     arg1-C-r	   Redo arg1 times
     arg1-u	   Undo arg1 times
     C-i TAB	   Open file using text from the cursor to eol
     C-k	   Write the current buffer to file. Force write on 2nd
		   attempt
     arg1-C-w-arg2
		   Unindent arg2 region arg1 times
     arg1-<-arg2   Indent left arg2 region arg1 times
     arg1->-arg2   Indent right arg2 region arg1 times
     "-arg2	   Operate on the register arg2
     R		   Print registers and their contents
     arg1-@-arg2   Execute arg2 register macro arg1 times
     arg1-@@	   Execute a last executed register macro arg1 times
     arg1-.	   Repeat last normal command arg1 times
     arg1-v.	   Repeat last normal command moving down across arg1 lines
     :		   Enter vi mode ex prompt
     arg1-!-arg2   Enter pipe ex prompt based on the region specified by arg1
		   or arg2
     vv		   Open ex prompt with the last ex command from history
     arg1-vr	   Open %s/ ex prompt. arg1 specifies word(s) from the cursor
		   to be inserted
     arg1-vt-arg2  Open .,.+0s/ ex prompt. arg1 specifies number of lines from
		   the cursor. arg2 specifies word(s) from the cursor to be
		   inserted
     arg1-v/	   Open v/ xkwd ex prompt to set search keyword. arg1
		   specifies word(s) from the cursor to be inserted
     v;		   Open ! ex prompt
     vb		   Recurse into b-1 history buffer. Use any quit command to
		   exit recursion
     arg1-vi	   Open %s/^ {8}/ /g ex prompt. Contains regex for changing
		   spaces to tabs. arg1 modifies the width
     arg1-vI	   Open %s/^ /	      /g ex prompt. Contains regex for
		   changing tabs to spaces. arg1 modifies the width
     vo		   Remove trailing white spaces and \r line endings
     va		   Toggle autoindent on or off. see ai ex option
     C-g	   Print buffer status infos
     1-C-g	   Enable permanent status bar row
     2-C-g	   Disable permanent status bar row
     ga		   Print character info
     1-ga	   Enable permanent character info bar row
     2-ga	   Disable permanent character info bar row
     arg1-gw	   Hard line wrap a line to arg1 col limit
     arg1-gq	   Hard line wrap a buffer to arg1 col limit
     g~-arg2	   Switch character case for arg2 region
     gu-arg2	   Switch arg2 region to lowercase
     gU-arg2	   Switch arg2 region to uppercase
     arg1-~	   Switch character case arg1 times forward
     i		   Enter insert mode
     I		   Enter insert moving cursor to the start of the line after
		   indentation
     a		   Enter insert mode 1 character forward
     A		   Enter insert mode moving cursor to the eol
     arg1-s	   Enter insert mode deleting arg1 characters
     S		   Enter insert mode deleting everything on the line
     o		   Enter insert mode creating a new line down
     O		   Enter insert mode creating a new line up
     arg1-c-arg2   Enter insert mode deleting arg2 region arg1 times
     C		   Enter insert mode deleting from cursor to the eol
     arg1-d-arg2   Delete arg2 region arg1 times
     D		   Delete from a cursor to the eol
     arg1-x	   Delete arg1 characters under the cursor forward
     arg1-X	   Delete arg1 characters under the cursor backward
     di-arg2	   Delete around arg2 which can be ( or ) or "
     ci-arg2	   Change around arg2 which can be ( or ) or "
     arg1-r-arg2   Replace arg1 characters with arg2 under the cursor forward
     K		   Split a line
     arg1-K	   Split a line without creating empty new lines
     arg1-J	   Join arg1 lines
     vj		   Toggle space padding when joining lines
     arg1-y-arg2   Yank arg2 region arg1 times
     Y yy	   Yank a line
     arg1-p	   Paste a default register
     arg1-P	   Paste a default register below current line or behind
		   cursor pos
     m-arg2	   Set a buffer local line mark arg2
     C-t	   Set a global file mark 0
     arg1-C-t	   Set or switch to a global mark based on arg1 % 2 == 0
     arg1-C-7 arg1-C-_
		   Show buffer list and switch based on arg1 or 0-9 index when
		   prompted
     C-^ C-6	   Swap to the previous buffer
     arg1-C-n	   Swap to the next buffer, arg1 changes direction
		   (forward/backward)
     \		   Swap to /fm/ buffer b-2
     z-arg2	   Change alternate keymap to arg2
     ze zf	   Switch to the English and alternate keymap
     zL zl zr zR   Change the value of td option
     arg1-/	   Search using regex down skipping arg1 matches
     arg1-?	   Search using regex up skipping arg1 matches
     arg1-n	   Repeat search down skipping arg1 matches
     arg1-N	   Repeat search up skipping arg1 matches
     C-a	   Auto search word under the cursor, not centering and
		   wrapping up/down direction
     arg1-C-a	   Auto search setting arg1 words from the cursor
     C-]	   Filesystem search forward based on directory listing in b-2
     arg1-C-]	   Filesystem search forward, setting search keyword to arg1
		   words under the cursor
     C-p	   Filesystem search backward based on directory listing in
		   b-2
     arg1-C-p	   Filesystem search backward, setting search keyword to arg1
		   words under the cursor
     C-z	   Suspend vi
     C-l	   Force redraw whole screen and update terminal dimensions
     qq		   Force quit cleaning the terminal
     zz		   Force quit not cleaning the terminal, submits commands if
		   recursive
     ZZ		   Soft quit, attempting to write the file before exit

INSERT MODE
     C-h Backspace
		   Delete a character
     C-u	   Delete util C-x mark or everything
     C-w	   Delete a word
     C-t	   Increase indent
     C-d	   Decrease indent
     C-]	   Switch a default paste register to 0-9
     C-\-arg2	   Select paste register arg2. C-\ selects default register
     C-p	   Paste a register
     C-g	   Index buffer for autocomplete
     C-y	   Reset autocomplete db
     C-r	   Loop through autocomplete options backward
     C-n	   Loop through autocomplete options forward
     C-z	   Suspend vi/ex
     C-x	   Set a mark for C-u and completion starting position
     C-b	   Recurse into b-1 history buffer when in ex prompt. Use any
		   quit command to exit recursion
     C-b	   Print autocomplete options when in vi insert
     C-a	   Loop through the strings in a history buffer b-1
     C-l	   Redraw the screen in vi mode, clean the terminal in ex
     C-o	   Switch between vi and ex modes recursively
     C-e	   Switch to english keymap
     C-f	   Switch to alternative keymap
     C-v-arg2	   Read a literal character arg2
     C-k-arg2	   Read a digraph sequence arg2
     C-c ESC	   Exit insert mode

VI MOTIONS
     Basic motion examples:
     3d/int  Delete text until the 3rd instance of "int" keyword
     d3w     Delete 3 words
     "ayl    Yank a character into 'a' register
     "Ayw    Append a word to 'a' register

EX
     Ex is a line editor for Unix systems originally written by Bill Joy in
     1976.  In ex, every command is prefixed with ':'. Ex is essential to vi,
     which allows it to run commands and macros. Together vi and ex create a
     beautiful symbiosis, which complements each other and helps to solve
     various domain problems.

EX EXPANSION
     Characters # and % in ex prompt substitute the buffer pathname.
     % substitutes current buffer and # last swapped buffer.
     It is possible to expand any arbitrary buffer by using % or
     # (no difference in this case) followed by the buffer number.
     Example:
     print the pathname for buffer 69 (if it exists).
     :!echo "%69"

     Every ex command is be able to receive data from the outside
     world through a special expansion character ! which runs a pipe
     command. If the closing ! is not specified, the end of the line
     becomes a terminator.
     Example:
     Substitute the value of env var $SECRET to the value of $RANDOM :).
     In this demo, we set the value of SECRET to "int" ourselves.
     :%s/!export SECRET="int" && printf "%s" $SECRET!/!printf "%s" $RANDOM! :)

EX ESCAPES
     Nextvi special character escapes work mostly the same way everywhere
     except the following situations:
      - Escapes in regex bracket expressions.
      - Due to ex expansion # % and ! characters have to be escaped
	if they are part of an ex command.
      - A single back slash requires 2 back slashes, and so on.
      - regex requires for ( to be escaped if used inside [] brackets.
      - In ex prompt the only separator is "|" character. It can
	be escaped normally but will require extra back slash if passed
	into a regular expression.

EX RANGES
     Some ex commands can be prefixed with ranges.
     .	     current position
     ,	     vertical range separator
     ;	     horizontal range separator
     :1,5p   print lines 1,5
     :.-5,.+5p
	     print 5 lines around xrow
     :/int/p
	     print first occurance of int
     :?int?p
	     print first occurance of int in reverse
     :.,/int/p
	     print until int is found
     :?int?,.p
	     print until int is found in reverse
     :'d,'ap
	     print lines from mark d to mark a
     :%p     print all lines in the buffer
     :$p     print last line in the buffer
     :;50    goto character offset 50
     :10;50  goto line 10 character offset 50
     :10;.+5
	     goto line 10 +5 character offset
     :'a;'a  goto line mark a character offset a
     :;$     goto eol
     :5;/int/
	     search for int on line 5
     :.;?int?
	     search for int in reverse on the current line

EX COMMANDS
     f	     Ranged search (stands for find)

	     Example: no range given, current line only
	     :f/int
	     Example: reverse
	     :f?int
	     Example: range given
	     :10,100f/int
	     Subsequent commands within the range will move to the next match
	     just like vi n/N commands.

     b	     Print currently active buffers state or switch to a buffer

	     Example: switch to the 5th buffer
	     :b5

	     There are 2 temporary buffers which are separate from
	     the main buffers.
	     b-1 = /hist/ ex history buffer
	     b-2 = /fm/ directory listing buffer
	     Example: switch to the b-1 buffer
	     :b-1
	     Example: switch to the b-2 buffer
	     :b-2

     bp	     Set current buffer path
     bs	     Set current buffer saved. If arg given, reset undo/redo history

     p	     Print line(s) from the buffer

	     Example: utilize character offset ranges
	     :1,10;5;5p
	     Example: print current line from offset 5 to 10
	     :.;5;10p

     ea	     Open file based on it's filename substring and from listing in
	     b-2

	     Requires directory listing in b-2 backfilled prior.
	     Example: backfill b-2 using :fd
	     :fd
	     Example: backfill b-2 using find
	     :b-2|1,$!find .

	     If the substring matches more than 1 filename, a prompt will
	     be shown. Submit using numbers 0-9 (higher ascii values work
	     too (C-c to cancel)). Passing an extra arg to :ea in form of
	     a number will bypass the prompt and open the corresponding file.
	     Example: open filename containing "v"
	     :ea v
	     Example: open first match containing "v"
	     :ea v 0

     ea!     Forced version of ea

     a i c   Enter ex append/insert/change mode

	     Range determines the position.
	     Exiting with \n.\n or \nESC will apply changes to the buffer.
	     Exiting with C-c will discard changes.

     d	     Delete line(s)
     e	     Open a file at path
     e!	     Reload the current buffer from the filesystem

     g	     Global command

	     Execute an ex command on a range of lines that matches a //
	     enclosed regex.

	     Example: remove empty lines
	     :g/^$/d

	     Multiple ex commands can be chained in one global command.
	     To chain commands, the ex separator "|" must be escaped once.
	     Example: yank matches appending to reg 'a' and print them out.
	     :g/int/ya A\|p

	     It is possible to nest global commands inside of global commands.
	     Example: find all lines with int and a semicolon and append
	     "has a semicolon"
	     :g/int/:.g/;/tp A has a semicolon<^C>
	     Advanced example: extract/print data enclosed in ()
	     :g/\(.+\)/;0;/\(.+\)/\|.;.+1k a\|se grp=2\|;/\)*(\))/\|se nogrp\|k s\|.;'a;'sp

     g! v    Inverted global command
     =	     Print the current range linenumber
     k	     Set a mark

     tp	     Global macro (stands for term_push)

	     Run any sequence of vi/ex commands or macros.
	     The most common use case is to run macros inside EXINIT.
	     Example: execute ci(int macro
	     :tp ci(int
	     Example: execute ci(int exiting insert mode
	     :tp ci(int<^C>
	     Example: execute ci)INT as a follow-up
	     :tp ci(int<^C>ci)INT

     tp!     Global macro recursive

	     Unlike :tp the recursion is not terminated on the sequence end.
	     Intended use is to debug a :tp macro.

     pu	     Paste a register

	     To pipe register data to an external process use :pu \!<cmd>
	     Example: copy default register to X11 clipboard
	     :pu \!xclip -selection clipboard

     q	     Soft quit
     q!	     Force quit

     r	     Read a file

	     To read data from a file use :<range>r <filename>
	     To read data from a pipe use :<range>r \!<cmd>
	     Example: pipe in only the first line
	     :r \!ls
	     Example: pipe in only lines 3,5
	     :3,5r \!ls
	     Example: pipe in all data
	     :%r \!ls

     w	     Soft write to a file

	     To write data to a file use :<range>w <filename>
	     To pipe buffer data to external process use :<range>w \!<cmd>
	     Example: pipe out all data into less
	     :w \!less
	     Example: pipe out only first 10 lines
	     :1,10w \!less

     w!	     Force write to a file
     wq x    Write and soft quit
     wq! x!  Write and force quit
     u	     Undo
     rd	     Redo

     se	     Set a variable

	     Example: set using implications
	     :se hll
	     :se nohll
	     Example: set using exact values
	     :se hll=1
	     :se hll=0

     s	     Substitute

	     Find and replace text in a range of lines that matches a //
	     enclosed regex with a // enclosed replacement string.

	     Example: global replacement
	     :%s/term1/term2/g

	     Substitution backreference inserts the text of matched group
	     specified by \x where x is group number.

	     Example: substitution backreference
	     this is an example text for subs and has int or void
	     :%s/(int)\|(void)/pre\0after
	     this is an example text for subs and has preintafter or void
	     :%s/(int)\|(void)/pre\2after/g
	     this is an example text for subs and has prepreafterafter or prevoidafter

     ya	     Yank a region

	     To append to the register, pass in its uppercase version.
	     To append to any of the non-alphabetical registers add any extra
	     character to the command.
	     Example: append to register 1
	     :ya 1x

     ya!     Reset register value

     !	     Run external program

	     When ex range specified, pipes the buffer data to an external
	     process and pipes the output back into current buffer replacing
	     the affected range.
	     Example: infamously sort the buffer
	     :1,$!sort

     ft	     Set a filetype

	     No argument prints the current file type.
	     Reloads the highlight ft, which makes it possible to reset dynamic
	     highlights created by options like "hlw".

     cm	     Set a keymap

	     No argument prints the current keymap name.

     cm!     Set an alternative keymap

     fd	     Set a secondary directory (stands for file dir)

	     Recalculates the directory listing in b-2 buffer.
	     No argument implies current directory.

     fp	     Set a directory path for :fd (stands for file path)

     cd	     Set a working directory (stands for change dir)

	     Currently open buffers' file paths will be automatically adjusted
	     to reflect a newly set working directory.

     inc     Include regex for :fd calculation

	     Example: include only files in submodule directory that end with .c
	     :inc submodule.*\.c$
	     Example: exclude the .git and submodule folders
	     :inc (^[\!.git\!submodule]+[^\/]+$)
	     No argument disables the filter.

     reg     Print registers and their contents

     bx	     Set max number of buffers allowed

	     Buffers will be deallocated if the number specified is lower
	     than the number of buffers currently in use.
	     No argument will reset to the default value of 10.

     ac	     Set autocomplete filter regex

	     No argument resets to the default word filter regex as defined
	     in led.c.

     uc	     Toggle multibyte utf-8 decoding

	     This command is particularly useful when editing files with
	     mixed encodings, binary files, or when the terminal does not
	     support UTF-8 or lacks the necessary fonts to display UTF-8
	     characters. Typically to be used along with :ph for the full
	     effect.

     ph	     Create new placeholders

	     Examples:
	     render 8 bit ascii (Extended ASCII) as '~':
	     :ph 128 255 1 1~
	     flawless ISO/IEC 8859-1 (latin-1) support:
	     :uc|ph 128 160 1 1~
	     reset to default as in conf.c:
	     :ph

EX OPTIONS
     ai	     If set, indent new lines.
     ic	     If set, ignore case in regular expressions.

     ish     Interactive shell

	     Makes every "!" pipe command run through an interactive shell
	     so that all shell features e.g. aliases work.

     grp     Regex search group

	     Defines a target search group for any regex search operation.
	     This becomes necessary when the result of regex search is to
	     be based on some group rather than default match group.

	     Example: ignore tabs at the beginning of the line
	     :se grp=2|1,$f/^[	     ]+(.+)|se nogrp

	     The value of grp is calculated using (group number * 2).
	     The default group number is 0.

     hl	     If set, highlight text based on rules defined in conf.c.
     hlr     If set, highlight text in reverse direction.
     hll     If set and defined in hl, highlight current line.
     hlp     If set and defined in hl, highlight [](){} pairs.
     hlw     If set and defined in hl, highlight current word under the
	     cursor.
     led     If unset, all terminal output is disabled.

     mpt     Control vi prompts

	     When set to 0 after an ex command is called from vi, disables
	     the "[any key to continue]" prompt.
	     If mpt is negative, the prompt will remain disabled.

     order   If set, reorder characters based on rules defined in conf.c.
     shape   If set, perform Arabic script letter shaping.
     pac     If set, print autocomplete suggestions on the fly.
     tbs     Number of spaces used to represent a tab.
     td	     Current text direction context.  This option accepts four
	     meaningful values:
	     +2	     Exclusively left-to-right.
	     +1	     Follow dircontexts[] (in conf.c), defaulting to left-to-
		     right.
	     -1	     Follow dircontexts[], defaulting to right-to-left.
	     -2	     Exclusively right-to-left.

     pr	     Print register

	     Set a special register using a character or a number.
	     Once the register is set, all data passed into ex_print will
	     be stored in the register.
	     If the register is uppercase, new lines are added to match the
	     exact output that was printed.
	     Example: paste current buffer list exactly like from :b command
	     :se pr=A|ya! a|b|pu a
	     Example: store a line printed with :p
	     :se pr=A|ya! a|p

EXINIT ENV VAR
     EXINIT defines a sequence of vi/ex commands to be performed
     at startup. Consequently, this is the primary way for scripting
     and customizing nextvi outside of C.
     Many standard text processing utils such as grep, awk, sed
     can be replaced by nextvi with EXINIT in mind.

     Example 1:
     There is a dictionary file (assume vi.c), which we always want
     to have indexed at startup for autocomplete. The last "bx" commands
     delete the vi.c buffer.
     export EXINIT=$(printf "e ./vi.c|tp i\x7\x3|bx 1|bx")

     Example 2:
     Load some file (assume vi.c) into vi's history buffer.
     export EXINIT="b-1|%r ./vi.c|b-1"

     Example 3:
     Setup a @ macro in register a
     When @a is executed the macro will create { and closing } below
     the cursor leaving cursor in insert mode in between the braces.
     export EXINIT=$(printf "e|tp io{\n}\x16\x3kA\x3|tp 1G|tp 2\"ayy")

REGEX
     Nextvi's regex syntax is akin to that of Plan 9.
     .	     match any single char
     ^	     assert start of the line
     $	     assert end of the line
     {N,M}   match N to M times
     ()	     grouping
     (?:)    non capture grouping
     [N-M]   match ranges N to M
     *	     repeated zero or more times
     +	     repeated one or more times
     |	     union, alternative branch
     \<	     assert beginning of the word
     \>	     assert end of the word
     ?	     one or zero matches greedy
     ??	     one or zero matches lazy

     Additionally, Nextvi's supports static lookahead expressions. For example
     [!abc] and [=abc] where ! is negated version of =. This will treat "abc"
     as (a && b && c) logically. It is possible to have multiple in one
     bracket expression as well. For example [!abc!cda!qwe] where each string
     delimited by the ! acts like a typical or operation i.e. [acq] with only
     difference of testing the extra characters ahead. To combine both
     standard bracket expression and lookahead in one, use ^ or ^= where ^ is
     negated and ^= is default. For example: [!abc^=123] characters after ^=
     match exactly how [123] would.

SPECIAL MARKS
     *	     position of the previous change
     [	     first line of the previous change
     ]	     last line of the previous change

SPECIAL REGISTERS
     /	     previous search keyword
     :	     previous ex command
     0	     previous value of default register (atomic)
	     Atomic means the operation did not include a whole line
	     and a \n character.
     1-9     previous value(s) of default register (nonatomic)

CODE MAP
     +--------------+---------------------+
     | 293  conf.c  | hl/ft/td config	  |
     | 340  term.c  | low level IO	  |
     | 382  ren.c   | positioning/syntax  |
     | 457  vi.h    | definitions/aux	  |
     | 537  kmap.h  | keymap translation  |
     | 601  lbuf.c  | file/line buffer	  |
     | 653  uc.c    | UTF-8 support	  |
     | 658  regex.c | extended RE	  |
     | 662  led.c   | insert mode/output  |
     | 1232 ex.c    | ex options/commands |
     | 2031 vi.c    | normal mode/general |
     | 7846 total   | wc -l *.[ch]|sort	  |
     +--------------+---------------------+

COMPILING
     export CC='g++ -x c'
	     set compiler, g++ example
     export CFLAGS='-s'
	     set CFLAGS, strip example
     ./cbuild.sh
	     Basic build
     ./cbuild.sh debug
	     Basic debug build
     ./cbuild.sh pgobuild
	     pgobuild which can lead to a significant performance boost on
	     some application specific tasks.
     valgrind --tool=cachegrind --cache-sim=yes --branch-sim=yes ./vi vi.c
	     performance bench test

PHILOSOPHY
     In most text editors, flexibility is a minor or irrelevant design goal.
     Nextvi is designed to be flexible where the editor adapts to the user needs.
     This flexibility is achieved by heavily chaining basic commands and allowing
     them to create new ones with completely different functionality. Command
     reuse keeps the editor small without infringing on your freedom to quickly
     get a good grasp on the code. If you want to customize anything, you should
     be able to do it using the only core commands or a mix with some specific C
     code for more difficult tasks. Simple and flexible design allows for straight
     forward solutions to any problem long term and filters bad inconsistent ideas.

     "All software sucks, but some do more than others."
	     - Kyryl Melekhin

SEE ALSO
     New functionality can be obtained through optional patches provided in the
     patches branch. If you have a meaningful contribution and would love to be
     made public the patch can be submitted via email or github pull request.
     https://github.com/kyx0r/nextvi/tree/patches

     Resources used to create this manual and contributions to be submitted on
     the manual branch.
     https://github.com/kyx0r/nextvi/tree/manual

     Q: What is pikevm?
     A: Pikevm is a complete rewrite of nextvi's regex engine for the purposes of
     getting rid of backtracking and severe performance and memory constraints.
     Pikevm guarantees that all regular expressions are computed in constant space
     and O(n+k) time where n is size of the string and k is some constant for the
     complexity of the regex i.e. number of state transitions. It is important to
     understand that it does not mean that we run at O(n) linear speed, but rather
     the amount of processing time & memory usage is distributed evenly and linearly
     throughout the string, the k constant plays a big role. If you are familiar
     with radix sort algorithms this follows the same idea.
     Q: What are the other benefits?
     A: For example, now it is possible to compute a C comment /* n */ where n can
     be an infinite number of characters. Of course this extends to every other
     valid regular expression.
     Q: New features pikevm supports?
     A: Additionally, pikevm supports PCRE style non capture group (?:) and lazy
     quantifiers like .*? and .+?? because they were easy to implement and allow
     for further regex profiling/optimization.
     Q: NFA vs DFA (identify)
     A: pikevm = NFA backtrack = DFA
     Q: What's wrong with original implementation?
     A: Nothing except it being slow and limited. My improved version of Ali's DFA
     implementation ran 3.5X faster in any case, however I found a bug with it
     where zero quantifier "?" nested groups compute wrong submatch results. To
     fix this problem, it would require to undo a lot of optimization work already
     done, basically going back to how slow Ali's implementation would be. The reason
     this was spotted so late was because this kind of regex wasn't used before,
     so I never tested it. Other than that I think submatch extraction is correct
     on other cases. Pikevm does not have this bug, so it will be used as main
     regex engine from now on, unless dfa ever finds a proper fix. Honestly, this
     change isn't so surprising, as I was working on pikevm a few months prior, to
     favor a superior algorithm.
     You can still find that code here (likely with no updates):
     https://github.com/kyx0r/nextvi/tree/dfa_dead
     As a downside, NFA simulation loses the DFA property of being able to
     quickly short circuit a match, as everything runs linearly and at constant
     speed, incurring match time overhead. Well optimized DFA engine can
     outperform pikevm, but that is rather rare as they got problems of their own.
     For example as independently benchmarked, dfa_dead runs only 13% faster than
     pikevm and that is stretching the limit of what is physically possible on a
     table based matcher. Can't cheat mother nature, and if you dare to try she's
     unforgiving at best.
     Supplementary reading by Russ Cox:
     https://swtch.com/~rsc/regexp/regexp1.html

     Original Neatvi repository:
     https://github.com/aligrudi/neatvi

AUTHORS
     Nextvi was written by Kyryl Melekhin <k.melekhin@gmail.com>.  It is based
     on neatvi(1), which was written by Ali Gholami Rudi <ali@rudi.ir>.	 This
     manual page was inspired by nÃ©pÃ©ta <nepeta@canaglie.net>

Linux 6.11.4-arch1-1	       October 29, 2024		  Linux 6.11.4-arch1-1
