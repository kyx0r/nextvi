Nextvi(1)		    General Commands Manual		     Nextvi(1)

NAME
     Nextvi â€“ A small vi/ex editor for editing bidirectional UTF-8 text

SYNOPSIS
     vi [-emsv] [file ...]

DESCRIPTION
     Nextvi is a vi(1)-like text editor based on Ali Gholami Rudi's Neatvi(1).
     Invented Bill Joy in 1976, VI (Visual Editor) is a text editor that
     allows users to edit and manipulate text in a visual mode.	 It is a
     command-line editor that uses a set of keystrokes and commands to
     navigate and modify text. VI is a powerful and efficient editor that is
     widely used in Unix and Linux environments. It is known for its modal
     interface, where the user can switch between insert, command, and visual
     modes to perform different actions.It is also popular among developers
     and system administrators due to its flexibility and customization
     options. VI's syntax and command set are similar to those of other vi/ex
     editors, making it a versatile tool for users who are familiar with other
     text editors. 50 years later, I am pleased to present the superior vi
     implementation. Nextvi is a masterpiece, a symphony of efficiency and
     elegance. It boasts a blazing fast startup time, unrivaled portability
     and hackability, god powerful macro system and so much more.

OPTIONS
     -e	     Enter Ex mode on startup
     -m	     Disable initial file read message
     -s	     When combined with -e enters limited Ex mode
     -v	     Enter visual mode on startup. (Default)

NOTATION
     arg1-   An optional number prefixing a command
     -arg2   A required argument suffixing a command
     C-	     A ctrl key
     Space   A separation, multiple binds to the same command

VI NORMAL
     arg1-+ arg1-\n arg1-j
		   Move the cursor arg1 lines down
     arg1-- arg1-k
		   Move the cursor arg1 lines up
     ^		   Move the cursor to the start of the line after indentation

     arg1-#	   Enable/Disable line numbers and switch modes:
		   # - single shot print, shows global and relative numbers.
		   2# - permanent. shows global numbers.
		   4# - permanent. shows relative numbers after indentation.
		   8# - permanent. shows relative numbers.

     C-^ C-6	   Switch to previous buffer
     arg1-C-r	   Redo arg1 times
     arg1-u	   Undo arg1 times
     C-i TAB	   Open file using text from the cursor to eol
     arg1-C-e	   Scroll down 1 or arg1 lines. arg1 is set and stored, cursor
		   position preserved
     arg1-C-y	   Scroll up 1 or arg1 lines. arg1 is set and stored, cursor
		   position preserved
     arg1-C-d	   Scroll down half a screen size. If arg1 set scroll to arg1
		   lines
     arg1-C-u	   Scroll up half a screen size. If arg1 set scroll to arg1
		   lines
     C-b	   Scroll up full screen size
     C-f	   Scroll down full screen size
     C-k	   Write the current buffer to file. 2nd attempt force writes
     arg1-C-w-arg2
		   Unindent arg2 region
     arg1-<-arg2   Indent left arg2 region
     arg1->-arg2   Indent right arg2 region
     @-arg2	   Execute a arg2 register macro
     @@		   Execute a last executed register macro on a new line
     arg1-.	   Repeat last normal command arg1 times
     arg1-v.	   Repeat last normal command moving down across arg1 lines
     :		   Enter vi mode ex prompt
     arg1-!-arg2   Enter pipe ex prompt based on the region specified by arg1
		   or arg2
     vv		   Open ex prompt with the last ex command from history
     arg1-vr	   Open %s/ ex prompt. arg1 specifies word(s) from the cursor
		   to be inserted
     arg1-vt-arg2  Open .,.+0s/ ex prompt. arg1 specifies number of lines from
		   the cursor. arg2 specifies word(s) from the cursor to be
		   inserted
     arg1-v/	   Open v/ xkwd ex prompt to set search keyword. arg1
		   specifies word(s) from the cursor to be inserted
     v;		   Open ! ex prompt
     vb		   Switch to b-1 history buffer
     arg1-vi	   Open %s/^ {8}/ /g ex prompt. Contains regex for changing
		   spaces to tabs. arg1 modifies the width
     arg1-vI	   Open %s/^ /	      /g ex prompt. Contains regex for
		   changing tabs to spaces. arg1 modifies the width
     vo		   Removes \r character from line endings and trailing white
		   spaces
     va		   Toggle autoindent on or off. see xai
     C-g	   Print buffer status infos
     arg1-C-g	   Enable permanent status bar row
     ga		   Print character info
     arg1-ga	   Enable permanent character info bar row
     arg1-gw	   Hard wrap a line to arg1 col limit
     arg1-gq	   Hard wrap a buffer to arg1 col limit
     gg		   Goto the first line in the buffer
     g~-arg2	   Switch case for arg2 region
     gu-arg2	   Switch to lowercase for arg2 region
     gU-arg2	   Switch to uppercase for arg2 region
     arg1-~	   Switch case arg1 times forward
     '-arg2	   Goto a line mark arg2
     m-arg2	   Set a buffer local line mark arg2
     i		   Enter insert mode
     I		   Enter insert moving cursor to the start of the line after
		   indentation
     a		   Enter insert mode 1 character forward
     A		   Enter insert mode moving cursor to the eol
     s		   Enter insert mode deleting character under the cursor
     S		   Enter insert mode deleting everything on the line
     o		   Enter insert mode creating a new line down
     O		   Enter insert mode creating a new line up
     arg1-c-arg2   Enter insert mode deleting based on the arg2 motion region
     C		   Enter insert mode deleting from cursor to the eol
     arg1-d-arg2   Delete a arg2 region
     D		   Delete from a cursor to the eol
     di-arg2	   Delete around arg2 which can be ( or ) or "
     ci-arg2	   Change around arg2 which can be ( or ) or "
     K		   Split a line
     arg1-K	   Split a line without creating empty new lines
     arg1-J	   Join arg1 lines
     vj		   Raw line join mode, disables space padding when joining
		   lines
     arg1-y-arg2   Yank a region
     Y yy	   Yank a line
     arg1-p	   Paste a default register
     arg1-P	   Paste a default register below current line or behind
		   cursor pos
     "-arg2	   Operation on the register arg2
     R		   Print registers and their contents
     V		   Toggle show hidden characters: Space,Tab,New line
     arg1-r-arg2   Replace arg1 characters with arg2 under the cursor forward
     C-v	   Show line motion numbers for ebEBwW. Switches its modes
     arg1-C-v	   Disable line motion numbers
     arg1-G	   Goto the last line in the buffer or arg1 line
     H		   Goto the highest line of the screen
     L		   Goto the lowest line of the screen
     M		   Goto the middle line of the screen
     arg1-x	   Delete arg1 characters under the cursor forward
     arg1-X	   Delete arg1 characters under the cursor backward
     arg1-,	   Repeat last f or F or t or F command backward arg1 times
     arg1-;	   Repeat last f or F or t or F command forward arg1 times
     arg1-h	   Move the cursor arg1 cols left
     arg1-l	   Move the cursor arg1 cols right
     f-arg2	   Move the cursor to the arg2 character found forward
     F-arg2	   Move the cursor to the arg2 character found backward
     t-arg2	   Move the cursor until the arg2 character found forward
     T-arg2	   Move the cursor until the arg2 character found backward
     arg1-B	   Move the cursor to the end of the word skipping punctuation
		   backward arg1 times
     arg1-E	   Move the cursor to the end of the word skipping punctuation
		   forward arg1 times
     arg1-b	   Move the cursor to the end of the word backward arg1 times
     arg1-e	   Move the cursor to the end of the word forward arg1 times
     arg1-W	   Move the cursor to the start of the word skipping
		   punctuation forward arg1 times
     arg1-w	   Move the cursor to the start of the word forward arg1 times
     {		   Move the cursor to the next { region up
     }		   Move the cursor to the next { region down
     [		   Move the cursor to the next \n region up
     ]		   Move the cursor to the next \n region down
     C-]	   Filesystem search forward based on directory listing in b-2
     arg1-C-]	   Filesystem search forward, setting search keyword to arg1
		   words under the cursor
     C-p	   Filesystem search backward based on directory listing in
		   b-2
     C-t	   Set a global file mark
     arg1-C-t	   Set or switch to a global mark based on arg1 % 2 == 0
     arg1-C-7 arg1-C-_
		   Show buffer list and switch based to arg1 buffer or 0-9
		   when prompted
     0 |	   Move the cursor to the start of the line.
     arg1-z.	   Center the screen. arg1 is xtop
     arg1-z\n	   Center the screen at top row. arg1 is xtop
     arg1-z-	   Center the screen at bottom row. arg1 is xtop
     z-arg2	   Change alternate keymap to arg2
     ze zf	   Switch to the English and alternate keymap
     zL zl zr zR   Change the value of td option
     $		   Move the cursor to the eol
     arg1-|	   Move the cursor to arg1 col
     arg1-/	   Search using regex down skipping arg1 matches
     arg1-?	   Search using regex up skipping arg1 matches
     arg1-n	   Repeat search down skipping arg1 matches
     arg1-N	   Repeat search up skipping arg1 matches
     C-a	   Auto search word under the cursor, not centering and
		   wrapping up/down direction
     arg1-C-a	   Auto search setting arg1 words from the cursor
     arg1-Space	   Move cursor arg1 character forward
     arg1-C-h arg1-Backspace
		   Move cursor arg1 character backward
     `-arg2	   Goto a line mark arg2 with horizonal position
     %		   Move the cursor to [](){} pair
     arg1-%	   Move the cursor to the arg1 percent line number
     arg1-C-n	   Swap to the next buffer, arg1 changes direction
		   (forward/backward)
     \		   Swap to /fm/ buffer b-2
     C-z	   Suspend vi
     C-l	   Force redraw whole screen and update terminal dimensions
     qq		   Force quit cleaning the terminal
     zz		   Force quit not cleaning the terminal, submits commands if
		   recursive
     ZZ		   Soft quit, attempting to write the file before exit

INSERT MODE
     C-h Backspace
		   Delete a character
     C-u	   Delete util C-x mark or everything
     C-w	   Delete a word
     C-t	   Increase indent
     C-d	   Decrease indent
     C-]	   Switch a default paste register to 0-9
     C-\-arg2	   Select paste register arg2. \ selects default register
     C-p	   Paste a register
     C-g	   Index a buffer for autocomplete
     C-y	   Reset autocomplete db
     C-r	   Loop through autocomplete options backward
     C-n	   Loop through autocomplete options forward
     C-z	   Suspend vi/ex
     C-x	   Set a mark for C-u and completion starting position
     C-b	   Open history buffer b-1 when in ex prompt, otherwise print
		   autocomplete options
     C-a	   Loop through the strings from a history buffer b-1
     C-l	   Redraw the screen in vi mode, clean the terminal in ex
     C-o	   Switch between vi and ex modes
     C-e	   Switch to english keymap
     C-f	   Switch to alternative keymap
     C-v-arg2	   Read a literal character arg2
     C-k-arg2	   Read a diagraph sequence arg2
     C-c ESC	   Exit insert mode

EX
     Ex is a line editor for Unix systems originally written by Bill Joy in
     1976.  In ex, every command is prefixed with ':'. Ex is essential to vi
     which allows it to run commands and macros. Together vi and ex create a
     beautiful symbiosis which complements eath other and helps to solve
     various domain problems.

EX RANGES
     Some ex commands can be prefixed with ranges.
     Example: print lines 1,5
	     :1,5p
     Example: print 5 lines around xrow
	     :.-5,.+5p
     Example: print until int is found
	     :.,/int/p
     Example: print until int is found in reverse
	     :?int?,.p
	     Note: in some cases . can be dropped but is kept for readability.
     Example: print lines from mark d to mark a
	     :'d,'ap

EX COMMANDS
     f	     Ranged search (stands for find)

	     Example (no range given, current line only):
	     :f/int
	     or
	     :f?int
	     or (specified range)
	     :10,100f/int
	     Additionally, :f supports xoff (horizontal offset). This is
	     essential for scripting macros. Subsequent commands within the
	     range will move to the next match just like n/N.

     b	     Print currently active buffers and their state
     bp	     Set current buffer path
     bs	     Set current buffer saved. If arg given, reset undo/redo history
     p	     Print line(s) from the buffer

     ea	     Open file based on it's filename substring and from listing in
	     b-2

	     If the substring matches more than 1 filename, a prompt will
	     be shown. Submit using numbers 0-9 (higher ascii values work
	     too (^c to cancel)). Passing an extra arg to :ea in form of
	     a number will bypass the prompt and open the corresponding file.

     ea!     Forced version of ea
     a	     Enter ex append mode (exiting with ^c will discard changes)
     i	     Enter ex insert mode (exiting with ^c will discard changes)
     c	     Enter ex change mode (exiting with ^c will discard changes)
     d	     Delete a line
     e	     Open a file at path
     e!	     Reload the current buffer from FS

     g	     Global command

	     Same syntax as ex substitution command, but instead of replacement
	     string it takes an ex command after the / / enclosed regex.
	     Example: remove empty lines
	     :g/^$/d
	     Try doing similar with substitution command - will not work
	     as removing '\n' without deleting the line is invalid, but
	     it will work with global command. Multiple ex commands can be
	     chained in one global command.
	     In this case the ex separator has to be escaped once.
	     Example: yank matches and print them out.
	     :g/int/ya A\|p
	     If you wanted to get really fancy, it is possible to nest global
	     commands inside of global commands.
	     Example: find all lines with int and a semicolon and append "has a semicolon"
	     :g/int/:.g/;/tp A has a semicolon?

     g! v    Inverted global command
     =	     Move the cursor to a line number
     k	     Set a mark

     tp	     Global macro (stands for term_push)

	     It can run any vi normal command and execute insert statements.
	     The advantage of tp over traditional macros is in the ability
	     to bypass the macro queue and run independently. In a way, macro
	     executed by tp exercises the same causality as running C code
	     directly.

     pu	     Paste a register

	     :pu command can pipe the register to an external program by
	     specifying \! as a 2nd argument.

     q	     Soft quit
     q!	     Force quit

     r	     Read a file

	     To read data from a pipe use :r \!date

     w	     Soft write a to file

	     To pipe data to external process use :w \!less

     w!	     Force write a to file
     wq x    Write and soft quit
     wq! x!  Write and force quit
     u	     Undo
     rd	     Redo

     se	     Set a variable

	     Examples:
	     :se var=1
	     :se novar

     s	     Substitute

	     Basic usage:
	     :%s/term1/term2/g

	     Substitution backreference:
	     This inserts the text of matched group specified by \x where x is
	     group number. Example:
	     this is an example text for subs and has int or void
	     :%s/(int)\|(void)/pre\0after
	     this is an example text for subs and has preintafter or void
	     :%s/(int)\|(void)/pre\2after/g
	     this is an example text for subs and has prepreafterafter or prevoidafter

     ya	     Yank a region
     ya!     Reset register value
     !	     Run external program

     ft	     Set a filetype

	     Without filetype, prints the current file type. When filetype
	     is specified, sets the file type of the current ex buffer.
	     In nextvi :ft also reloads the highlight ft, which makes it
	     possible to reset dynamic highlights created by options like
	     "hlw".

     cm cm!  Keymap

	     Without kmap, prints the current keymap name. When kmap is specified,
	     sets the alternate keymap to kmap and, unless ! is given, switches
	     to this keymap.

     fd	     Set a secondary directory (stands for file dir)

	     Recalculates the directory listing for fssearch or :ea ex command.
	     No argument implies current directory.

     fp	     Set a secondary directory path (stands for file path)
     cd	     Set a working directory (stands for change dir)

     inc     Include regex for :fd calculation

	     Example 1:
	     We want to get only files in submodule directory that end with .c
	     extension:
	     :inc submodule.*\.c$
	     Example 2:
	     Exclude the .git and submodule folders.
	     :inc (^[\!.git\!submodule]+[^\/]+$)
	     Running "inc" without an arg will disable all filters.

     bx	     Set max number of buffers allowed (default is 10)

     ac	     Set autocomplete filter regex

	     Running ex command "ac" with no argument will reset back to
	     the default word filtering regex. You can find its string in
	     led.c as a reference.

EX OPTIONS
     ai	     If set, indent new lines.
     ic	     If set, ignore case in regular expressions.
     ish
     grp
     hl	     If set, highlight text based on rules defined in conf.c.
     hll     If set, highlight current line.
     hlp     If set, highlight pairs of brackets.
     hlr     If set, highlight text in reverse direction.
     hlw     If set, highlight current word.
     led
     mpt
     order   If set, reorder characters based on rules defined in conf.c.
     pac     If set, print autocomplete suggestions on the fly.
     shape   If set, perform Arabic script letter shaping.
     tbs     Number of spaces used to represent a tab.
     td	     Current text direction context.  This option accepts four
	     meaningful values:
	     +2	     Exclusively left-to-right.
	     +1	     Follow dircontexts[] (in conf.c), defaulting to left-to-
		     right.
	     -1	     Follow dircontexts[], defaulting to right-to-left.
	     -2	     Exclusively right-to-left.

SPECIAL MARKS
SPECIAL YANK BUFFERS
SEE ALSO
AUTHORS
     Nextvi was written by Kyryl Melekhin <k.melekhin@gmail.com>.  It is based
     on neatvi(1), which was written by Ali Gholami Rudi <ali@rudi.ir>.	 This
     manual page was written by nÃ©pÃ©ta <nepeta@canaglie.net>

Linux 6.11.4-arch1-1	      September 12, 2024	  Linux 6.11.4-arch1-1
