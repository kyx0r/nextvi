NEXTVI PATCHES
==============
Optional patches for Nextvi.
Apply: patch < name.patch

64bit.sh
--------------
Convert entire codebase to 64 bit long instead of int.
This will enable neatvi to read very large files and process huge buffers.
Run this after you've applied the patches. Most of the time you won't need
this, this is just a future proof concept in order for me to test that the
codebase cleanly converts to 64 bit.

gen-widechars.sh
--------------
A script I use to update zwchars and dwchars in uc.c

arrowkeys_normal.patch
--------------
Adds arrows keys support in normal mode.

arrowkeys_insert.patch
--------------
Adds arrows keys support in insert mode.

threaded_search.patch
--------------
Multithreaded version of lbuf_search(). Adjust the number of threads in use
and buffer stepping in lbuf.c Ensure that your system supports posix threads,
aka libpthread

hl_part.patch (DEFUNCT TODO)
--------------
Allow syntax highlight to continue past the terminal dimensions up to a
certain limit. To customize the depth, adjust LEDFORW and LEDBACK definitions
in led.c
The most complicated part of nextvi is the bounds calculation code and mapping
it to syntax highlighting. This patch essentially makes it even more complicated.
Most likely you will not be able to understand this code. However, it works
correcly in every scenario, so appreciate the art and hard work that went into it.

hl_naive.patch (DEFUNCT TODO)
--------------
Original approach to syntax highlight as in neatvi. Use this only if you don't
care about performance on large lines.
Pros:
1. Simpler and shorter code in led_render()
2. Unlimited length, can highlight anything pikevm is willing to match.
Cons:
1. Terrible performance, need to disable syntax hl if working with lines 10K+
(You've been warned!)
2. Cannot render lines like those by option pac=1 efficiently. Will recompute
the whole string every iteration.

debug.patch
--------------
Cleanup reachable memory upon termination.
Use for debugging.
Note: in some features leaks won't be freed - for example hlw (which is not
enabled by default) Also initializes sdense in regex.c so that valgrind stops
freaking out.

grep.patch
--------------
Adds a special temporary buffer /grep/ much like the default /hist/ or /fm/.
When new keybind ^x is executed vi performs fs_search on every file and
stores the results in /grep/ buffer. At last, user will be switched to /grep/.
Line information is stored and displayed with special new syntax highlight
rules. Searched keyword is also highlighted.  Use the familiar keybind ^i or
TAB on the wanted line to immediately open the file and goto the line
specified. To quickly open /grep/ use new keybind: vx
The format of the lines stored is specifically designed to mirror the output of
grep -r -n "str" .
The feature can be substituted with a pipe command in case of a higher performing
grep implementation or loading of cached results from script.

rstr.patch
--------------
Adaptation from upstream neatvi, where simple operations are optimized by
running a specialized search code instead of full regex engine. rstr can
yeild up to 3X faster search on non regex patterns. This is not included in
base nextvi due to underlying complexity.

stdin_pipe.patch
--------------
Allows the user to use vi like less except you need to specify
- as command line arg (just like in vim).
Example:
$ dmesg | vi -

ec_closebuf.patch
--------------
Allows the user to close the buffer using new ex command :cx
Specify a number as an arg for what buffer to close.
Specifying no argument(s) will close the current buffer.
When the buffer is closed all buffers above will be shifted
and renumbered.
Range can be supplied like so :cx0-5
This will close buffers 0 to 5 inclusive
Omiting the parameter of the range assumes current buffer
index for that parameter (not inclusive and either begin or end
of the range). Example :cx-5 or :cx5-

filetype_shebang.patch
--------------
Detect and set the corresponding filetype based on the shebang
or specific data in the file. Currently supports only shell
and python.

star_search.patch
--------------
Alternative to ^a search but does not center the screen.

kbd_layout.patch
--------------
Changes hjkl to work well with other keyboard layouts.
In this example hjkl is changed to yneo (workman keyboard layout)
Note: this patch can be used as a base for remapping any base keybinds.

quickexit.patch
--------------
Added quickexit to insert mode keybind: kj
It's important to understand that this has a caveat, if input comes too fast,
for example a paste from terminal and the sequence has "kj" in it, insert
mode will be cancelled mid way and paste will be wrong. Luckily this almost
never happens because such letter combination is extremely rare.
Delay time (in ms) can be set via :se qe=N or disabled by setting N to 0.

hl_mark.patch
-------------
Adds new ex option "mhl" which will highlight lbuf marks. Each mark has
different color up to 16. Higher marks may duplicate the colors.

c_option.patch
-------------
Adds -c commandline option. This can be used to pass in ex commands instead
of EXINIT.

exrc.patch
-------------
Adds support for reading ~/.exrc file. This can be used to pass in ex
commands instead of EXINIT.

exrc-xdg.patch
-------------
Adds XDG dir support for exrc.patch.

readonly.patch
-------------
Adds new ex option "ro" and commandline readonly option -R

remove_variable_length_arrays.patch
--------------
Removes variable length arrays for portability reasons.

undojump.patch
--------------
Adds a new keybind ^o which allows to jump through the undo marks
without actually doing undo.

undo_branches.patch
--------------
Adds a basic multi-level undo implementation. Use the new ex command :up
to print the divergent changes. Each path has an index, to switch to it
use :up with a number as an argument. Example: :up1
The current undo branch is stored as the last index before swapping.

alternate-w-behaviour.patch
--------------
Implements more vim/like d/c/yw

ac_context.patch
--------------
Improvements to autocomplete, now the word completion will also use
text that prefixes the insert when it makes sense. Makes it possible
to autocomplete in more desired situations.

linewrap.patch (DEFUNCT TODO)
--------------

ex-scripting.patch
--------------
Adds new commands :sc and :sx
NEXTVI_FT - current buffer filetype
NEXTVI_ROW - current line number
NEXTVI_OFF - current byte offset
NEXTVI_COFF - current character offset
NEXTVI_LINE - current line
NEXTVI_WORD - current word
:sc runs a command with the environment variables above
:sx runs a command with the environment variables above and
executes its stdout as ex commands

My current EXINIT setup:
--------------
How it works:
:se noled - temporarily disable redrawing the screen
:se ish - enable interactive shell
:i - runs insert statement with every macro inside until \n\x1b
:tp j0"wy$ - yank the line into a register w
:u$ - undo everything
:inc (^[\!.git]+[^\\/]+$) always exclude .git folder from :fd
:se pac - print autocomplete options
:se led - allow screen redraw

Macros:
@q = creates structure like this:
{

}
@w = creates structure like this:
whatever {
	whatever
	a
}
@e = brings :e !p $c into ex prompt
Note: p is alias to printf. $c[0-9] is env var containing some path
@r = creates ""
@a = creates a comment like this:
/* whatever */
@s = from the cursor creates a comment like this:
/* whatever */
@d = uncomment /* */ comment
@x = indent % region left
@f = brings :cd !p $c into ex prompt
Note: p is alias to printf. $c[0-9] is env var containing some path
@l = bring !cp % %_|w|!git diff --no-index %_ % macro into ex prompt.
Use to create patch and diff files fast. It relies on
you not saving the file prior to running the macro.
@c = run ac command and reindex ac db

export EXINIT=$'se noled|se ish|i o{\n}kA\n	\nA {jo}koa\n:e \!p $c\nI/*A*/\ni/*A*/\n/\/\*\n2x/\*\/\n2x\n>\%<<$\%<<\n:\!cp \% \%_\\|w\\|\!git diff --no-index \%_ \%\n:ac  \\|& i\\|ac3ls\n:cd \!p $c\n\x1b|&1G0"q2Y2j"Qy$ 0j"wy$ j0"ey$ j0"ay$ j0"sy$ j0"d2Y2j"Dy$ j0"xy$ j0"ly$ j0"cy$ j0"fy$|inc (^[\!.git]+[^\\/]+$)|u$|1|se pac|se led'
