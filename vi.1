.Dd Oct 27, 2024
.Dt Nextvi 1
.Os
.
.Sh NAME
.Nm Nextvi
.Nd A small vi/ex editor for editing bidirectional UTF-8 text
.
.Sh SYNOPSIS
.Nm vi
.Op Fl emsv
.Op Ar
.
.Sh DESCRIPTION
.Nm Nextvi
is a
.Xr vi 1 Ns -like
text editor based on Ali Gholami Rudi's
.Xr Neatvi 1 Ns .
VI is a legendary command-line text editor, first introduced
by Bill Joy in 1976, renowned for its modal interface, which
allows users to switch between insert, command, and visual modes
for seamless text manipulation. This powerful and efficient
editor has stood the test of time, remaining a staple tool for
developers and system administrators in Unix and Linux environments,
thanks to its flexibility, customization options, and syntax
similar to other vi/ex editors. To mark its 50th anniversary,
Nextvi emerges as the pinnacle of VI's evolution. This masterpiece
of efficiency and elegance boasts unparalleled startup speed,
unmatched portability, exceptional hackability, and an incredibly
robust macro system, among other features. Nextvi is truly the
next generation of VI, ready to elevate your text editing experience.
.
.Sh OPTIONS
.Bl -tag -width Ds -compact
.It Fl e
Enter Ex mode on startup
.It Fl m
Disable initial file read message
.It Fl s
When combined with -e enters limited Ex mode
.It Fl v
Enter visual mode on startup. (Default)
.El
.Sh NOTATION
.Bl -tag -width Ds -compact
.It Cm arg1-
An optional number prefixing a command
.It Cm -arg2
A required argument suffixing a command
.It Cm C-
A ctrl key
.It Cm Space
A separation, multiple binds to the same command
.El
.Sh VI NORMAL
.Bl -tag -width Dq -compact
.It Cm arg1-+ arg1-\en arg1-j
Move the cursor arg1 lines down
.It Cm arg1-- arg1-k
Move the cursor arg1 lines up
.It Cm arg1-h
Move the cursor arg1 cols left
.It Cm arg1-l
Move the cursor arg1 cols right
.It Cm f-arg2
Move the cursor to the arg2 character found forward
.It Cm F-arg2
Move the cursor to the arg2 character found backward
.It Cm t-arg2
Move the cursor until the arg2 character found forward
.It Cm T-arg2
Move the cursor until the arg2 character found backward
.It Cm arg1-,
Repeat last f or F or t or F command backward arg1 times
.It Cm arg1-;
Repeat last f or F or t or F command forward arg1 times
.It Cm arg1-B
Move the cursor to the end of the word skipping punctuation backward arg1 times
.It Cm arg1-E
Move the cursor to the end of the word skipping punctuation forward arg1 times
.It Cm arg1-b
Move the cursor to the end of the word backward arg1 times
.It Cm arg1-e
Move the cursor to the end of the word forward arg1 times
.It Cm arg1-W
Move the cursor to the start of the word skipping punctuation forward arg1 times
.It Cm arg1-w
Move the cursor to the start of the word forward arg1 times
.It Cm {
Move the cursor to the next { region up
.It Cm }
Move the cursor to the next { region down
.It Cm [
Move the cursor to the next \en region up
.It Cm ]
Move the cursor to the next \en region down
.It Cm ^
Move the cursor to the start of the line after indentation
.It Cm 0 |
Move the cursor to the start of the line.
.It Cm $
Move the cursor to the eol
.It Cm arg1-|
Move the cursor to arg1 col
.It Cm arg1-Space
Move cursor arg1 characters forward
.It Cm arg1-C-h arg1-Backspace
Move cursor arg1 characters backward
.It Cm %
Move the cursor to [](){} pair
.It Cm arg1-%
Move the cursor to the arg1 percent line number
.It Cm '-arg2
Goto a line mark arg2
.It Cm `-arg2
Goto a line mark arg2 with horizontal position
.It Cm gg
Goto the first line in the buffer
.It Cm arg1-G
Goto the last line in the buffer or arg1 line
.It Cm H
Goto the highest line of the screen
.It Cm L
Goto the lowest line of the screen
.It Cm M
Goto the middle line of the screen
.It Cm arg1-z.
Center the screen. arg1 is xtop
.It Cm arg1-z\en
Center the screen at top row. arg1 is xtop
.It Cm arg1-z-
Center the screen at bottom row. arg1 is xtop
.It Cm arg1-C-e
Scroll down 1 or arg1 lines. arg1 is set and stored, cursor position preserved
.It Cm arg1-C-y
Scroll up 1 or arg1 lines. arg1 is set and stored, cursor position preserved
.It Cm arg1-C-d
Scroll down half a screen size. If arg1 set scroll to arg1 lines
.It Cm arg1-C-u
Scroll up half a screen size. If arg1 set scroll to arg1 lines
.It Cm C-b
Scroll up full screen size
.It Cm C-f
Scroll down full screen size
.It Cm #
Show global and relative line numbers
.It Cm 2#
Toggle show global line numbers permanently
.It Cm 4#
Toggle show relative line numbers after indentation permanently
.It Cm 8#
Toggle show relative line numbers permanently
.It Cm V
Toggle show hidden characters: Space,Tab,New line
.It Cm C-v
Toggle show line motion numbers for ebEBwW
.It Cm arg1-C-v
Disable line motion numbers
.It Cm arg1-C-r
Redo arg1 times
.It Cm arg1-u
Undo arg1 times
.It Cm C-i TAB
Open file using text from the cursor to eol
.It Cm C-k
Write the current buffer to file. Force write on 2nd attempt
.It Cm arg1-C-w-arg2
Unindent arg2 region arg1 times
.It Cm arg1-<-arg2
Indent left arg2 region arg1 times
.It Cm arg1->-arg2
Indent right arg2 region arg1 times
.It Cm \&"-arg2
Operate on the register arg2
.It Cm R
Print registers and their contents
.It Cm @-arg2
Execute arg2 register macro
.It Cm @@
Execute a last executed register macro on a new line
.It Cm arg1-.
Repeat last normal command arg1 times
.It Cm arg1-v.
Repeat last normal command moving down across arg1 lines
.It Cm \&:
Enter vi mode ex prompt
.It Cm arg1-!-arg2
Enter pipe ex prompt based on the region specified by arg1 or arg2
.It Cm vv
Open ex prompt with the last ex command from history
.It Cm arg1-vr
Open %s/ ex prompt. arg1 specifies word(s) from the cursor to be inserted
.It Cm arg1-vt-arg2
Open .,.+0s/ ex prompt. arg1 specifies number of lines from the cursor. arg2 specifies word(s) from the cursor to be inserted
.It Cm arg1-v/
Open v/ xkwd ex prompt to set search keyword. arg1 specifies word(s) from the cursor to be inserted
.It Cm v;
Open ! ex prompt
.It Cm vb
Recurse into b-1 history buffer. Use any quit command to exit recursion
.It Cm arg1-vi
Open %s/^ {8}/	/g ex prompt. Contains regex for changing spaces to tabs. arg1 modifies the width
.It Cm arg1-vI
Open %s/^	/        /g ex prompt. Contains regex for changing tabs to spaces. arg1 modifies the width
.It Cm vo
Remove trailing white spaces and \er line endings
.It Cm va
Toggle autoindent on or off. see ai ex option
.It Cm C-g
Print buffer status infos
.It Cm 1-C-g
Enable permanent status bar row
.It Cm 2-C-g
Disable permanent status bar row
.It Cm ga
Print character info
.It Cm 1-ga
Enable permanent character info bar row
.It Cm 2-ga
Disable permanent character info bar row
.It Cm arg1-gw
Hard line wrap a line to arg1 col limit
.It Cm arg1-gq
Hard line wrap a buffer to arg1 col limit
.It Cm g~-arg2
Switch character case for arg2 region
.It Cm gu-arg2
Switch arg2 region to lowercase
.It Cm gU-arg2
Switch arg2 region to uppercase
.It Cm arg1-~
Switch character case arg1 times forward
.It Cm i
Enter insert mode
.It Cm I
Enter insert moving cursor to the start of the line after indentation
.It Cm a
Enter insert mode 1 character forward
.It Cm A
Enter insert mode moving cursor to the eol
.It Cm s
Enter insert mode deleting character under the cursor
.It Cm S
Enter insert mode deleting everything on the line
.It Cm o
Enter insert mode creating a new line down
.It Cm O
Enter insert mode creating a new line up
.It Cm arg1-c-arg2
Enter insert mode deleting based on the arg2 motion region
.It Cm C
Enter insert mode deleting from cursor to the eol
.It Cm arg1-d-arg2
Delete arg2 region arg1 times
.It Cm D
Delete from a cursor to the eol
.It Cm arg1-x
Delete arg1 characters under the cursor forward
.It Cm arg1-X
Delete arg1 characters under the cursor backward
.It Cm di-arg2
Delete around arg2 which can be ( or ) or \&"
.It Cm ci-arg2
Change around arg2 which can be ( or ) or \&"
.It Cm arg1-r-arg2
Replace arg1 characters with arg2 under the cursor forward
.It Cm K
Split a line
.It Cm arg1-K
Split a line without creating empty new lines
.It Cm arg1-J
Join arg1 lines
.It Cm vj
Toggle space padding when joining lines
.It Cm arg1-y-arg2
Yank arg2 region arg1 times
.It Cm Y yy
Yank a line
.It Cm arg1-p
Paste a default register
.It Cm arg1-P
Paste a default register below current line or behind cursor pos
.It Cm m-arg2
Set a buffer local line mark arg2
.It Cm C-t
Set a global file mark 0
.It Cm arg1-C-t
Set or switch to a global mark based on arg1 % 2 == 0
.It Cm arg1-C-7 arg1-C-_
Show buffer list and switch based to arg1 buffer or 0-9 when prompted
.It Cm C-^ C-6
Swap to the previous buffer
.It Cm arg1-C-n
Swap to the next buffer, arg1 changes direction (forward/backward)
.It Cm \e
Swap to /fm/ buffer b-2
.It Cm z-arg2
Change alternate keymap to arg2
.It Cm ze zf
Switch to the English and alternate keymap
.It Cm zL zl zr zR
Change the value of td option
.It Cm arg1-/
Search using regex down skipping arg1 matches
.It Cm arg1-?
Search using regex up skipping arg1 matches
.It Cm arg1-n
Repeat search down skipping arg1 matches
.It Cm arg1-N
Repeat search up skipping arg1 matches
.It Cm C-a
Auto search word under the cursor, not centering and wrapping up/down direction
.It Cm arg1-C-a
Auto search setting arg1 words from the cursor
.It Cm C-]
Filesystem search forward based on directory listing in b-2
.It Cm arg1-C-]
Filesystem search forward, setting search keyword to arg1 words under the cursor
.It Cm C-p
Filesystem search backward based on directory listing in b-2
.It Cm arg1-C-p
Filesystem search backward, setting search keyword to arg1 words under the cursor
.It Cm C-z
Suspend vi
.It Cm C-l
Force redraw whole screen and update terminal dimensions
.It Cm qq
Force quit cleaning the terminal
.It Cm zz
Force quit not cleaning the terminal, submits commands if recursive
.It Cm ZZ
Soft quit, attempting to write the file before exit
.El
.
.Sh INSERT MODE
.Bl -tag -width Dq -compact
.It Cm C-h Backspace
Delete a character
.It Cm C-u
Delete util C-x mark or everything
.It Cm C-w
Delete a word
.It Cm C-t
Increase indent
.It Cm C-d
Decrease indent
.It Cm C-]
Switch a default paste register to 0-9
.It Cm C-\e-arg2
Select paste register arg2. C-\e selects default register
.It Cm C-p
Paste a register
.It Cm C-g
Index a buffer for autocomplete
.It Cm C-y
Reset autocomplete db
.It Cm C-r
Loop through autocomplete options backward
.It Cm C-n
Loop through autocomplete options forward
.It Cm C-z
Suspend vi/ex
.It Cm C-x
Set a mark for C-u and completion starting position
.It Cm C-b
Recurse into b-1 history buffer when in ex prompt. Use any quit command to exit recursion
.It Cm C-b
Print autocomplete options when in vi insert
.It Cm C-a
Loop through the strings in a history buffer b-1
.It Cm C-l
Redraw the screen in vi mode, clean the terminal in ex
.It Cm C-o
Switch between vi and ex modes recursively
.It Cm C-e
Switch to english keymap
.It Cm C-f
Switch to alternative keymap
.It Cm C-v-arg2
Read a literal character arg2
.It Cm C-k-arg2
Read a digraph sequence arg2
.It Cm C-c ESC
Exit insert mode
.El
.
.Sh VI MOTIONS
Basic motion examples:
.Bl -tag -width Ds -compact
.It Cm 3d/int
Delete text until the 3rd instance of "int" keyword
.It Cm d3w
Delete 3 words
.It Cm \&"ayl
Yank a character into 'a' register
.It Cm \&"Ayw
Append a word to 'a' register
.El
.
.Sh EX
Ex is a line editor for Unix systems originally written by Bill Joy in 1976.
In ex, every command is prefixed with ':'. Ex is essential to vi, which allows it
to run commands and macros. Together vi and ex create a beautiful symbiosis, which
complements each other and helps to solve various domain problems.
.
.Sh EX EXPANSION
.Bd -literal -compact
Characters # and % in ex prompt substitute the buffer pathname.
% substitutes current buffer and # last swapped buffer.
It is possible to expand any arbitrary buffer by using % or
# (no difference in this case) followed by the buffer number.
Example:
print the pathname for buffer 69 (if it exists).
:!echo "%69"

Every ex command is be able to receive data from the outside
world through a special expansion character ! which runs a pipe
command. If the closing ! is not specified, the end of the line
becomes a terminator.
Example:
Substitute the value of env var $SECRET to the value of $RANDOM :).
In this demo, we set the value of SECRET to "int" ourselves.
:%s/!export SECRET="int" && printf "%s" $SECRET!/!printf "%s" $RANDOM! :)
.Ed
.
.Sh EX ESCAPES
Nextvi special character escapes work mostly the same way everywhere
except the following situations:
.Bd -literal -compact
 - Escapes in regex bracket expressions.
 - Due to ex expansion # % and ! characters have to be escaped
   if they are part of an ex command.
 - A single back slash requires 2 back slashes, and so on.
 - regex requires for ( to be escaped if used inside [] brackets.
 - In ex prompt the only separator is "|" character. It can
   be escaped normally but will require extra back slash if passed
   into a regular expression.
.Ed
.
.Sh EX RANGES
Some ex commands can be prefixed with ranges.
.Bl -tag -width Ds -compact
.It Cm \&.
current position
.It Cm \&,
vertical range separator
.It Cm \&;
horizontal range separator
.It Cm :1,5p
print lines 1,5
.It Cm :.-5,.+5p
print 5 lines around xrow
.It Cm :/int/p
print first occurance of int
.It Cm :?int?p
print first occurance of int in reverse
.It Cm :.,/int/p
print until int is found
.It Cm :?int?,.p
print until int is found in reverse
.It Cm :'d,'ap
print lines from mark d to mark a
.It Cm :%p
print all lines in the buffer
.It Cm :$p
print last line in the buffer
.It Cm :;50
goto character offset 50
.It Cm :10;50
goto line 10 character offset 50
.It Cm :10;.+5
goto line 10 +5 character offset
.It Cm :'a;'a
goto line mark a character offset a
.It Cm :;$
goto eol
.It Cm :5;/int/
search for int on line 5
.It Cm :.;?int?
search for int in reverse on the current line
.El
.
.Sh EX COMMANDS
.Bl -tag -width Ds -compact
.It Cm f
Ranged search (stands for find)
.Bd -literal
Example: no range given, current line only
:f/int
Example: reverse
:f?int
Example: range given
:10,100f/int
Subsequent commands within the range will move to the next match
just like vi n/N commands.
.Ed

.It Cm b
Print currently active buffers state or switch to a buffer
.Bd -literal
Example: switch to the 5th buffer
:b5

There are 2 temporary buffers which are separate from
the main buffers.
b-1 = /hist/ ex history buffer
b-2 = /fm/ directory listing buffer
Example: switch to the b-1 buffer
:b-1
Example: switch to the b-2 buffer
:b-2
.Ed

.It Cm bp
Set current buffer path
.It Cm bs
Set current buffer saved. If arg given, reset undo/redo history

.It Cm p
Print line(s) from the buffer
.Bd -literal
Example: utilize character offset ranges
:1,10;5;5p
Example: print current line from offset 5 to 10
:.;5;10p
.Ed

.It Cm ea
Open file based on it's filename substring and from listing in b-2
.Bd -literal
Requires directory listing in b-2 backfilled prior.
Example: backfill b-2 using :fd
:fd
Example: backfill b-2 using find
:b-2|1,$!find .

If the substring matches more than 1 filename, a prompt will
be shown. Submit using numbers 0-9 (higher ascii values work
too (^c to cancel)). Passing an extra arg to :ea in form of
a number will bypass the prompt and open the corresponding file.
Example: open filename containing "v"
:ea v
Example: open first match containing "v"
:ea v 0
.Ed

.It Cm ea!
Forced version of ea

.It Cm a i c
Enter ex append/insert/change mode
.Bd -literal
Range determines the position.
Exiting with \en.\en or \enESC will apply changes to the buffer.
Exiting with ^c will discard changes.
.Ed

.It Cm d
Delete line(s)
.It Cm e
Open a file at path
.It Cm e!
Reload the current buffer from the filesystem

.It Cm g
Global command
.Bd -literal
Execute an ex command on a range of lines that matches a //
enclosed regex.

Example: remove empty lines
:g/^$/d

Multiple ex commands can be chained in one global command.
To chain commands, the ex separator "|" must be escaped once.
Example: yank matches appending to reg 'a' and print them out.
:g/int/ya A\e|p

It is possible to nest global commands inside of global commands.
Example: find all lines with int and a semicolon and append
"has a semicolon" (^C must be literal)
:g/int/:.g/;/tp A has a semicolon^C
Advanced example: extract/print data enclosed in ()
:g/\e(.+\e)/;0;/\e(.+\e)/\e|.;.+1k a\e|se grp=2\e|;/\e)*(\e))/\e|se nogrp\e|k s\e|.;'a;'sp
.Ed

.It Cm g! v
Inverted global command
.It Cm =
Print the current range linenumber
.It Cm k
Set a mark

.It Cm tp
Global macro (stands for term_push)
.Bd -literal
Run any sequence of vi/ex commands or macros.
The advantage of tp over @ macros is in the ability execute other
macros and be executed from @ macros.
For example, macro di( cannot be executed by a @ register because
di( is a macro in itself. However, it can be executed using :tp.
Example: execute di( macro
:tp di(
Example: call :tp using :tp and execute di( (\en is literal)
:tp :tp di(\en
.Ed

.It Cm pu
Paste a register
.Bd -literal
To pipe register data to an external process use :pu \e!<cmd>
Example: copy default register to X11 clipboard
:pu \e!xclip -selection clipboard
.Ed

.It Cm q
Soft quit
.It Cm q!
Force quit

.It Cm r
Read a file
.Bd -literal
To read data from a file use :<range>r <filename>
To read data from a pipe use :<range>r \e!<cmd>
Example: pipe in only the first line
:r \e!ls
Example: pipe in only lines 3,5
:3,5r \e!ls
Example: pipe in all data
:%r \e!ls
.Ed

.It Cm w
Soft write to a file
.Bd -literal
To write data to a file use :<range>w <filename>
To pipe buffer data to external process use :<range>w \e!<cmd>
Example: pipe out all data into less
:w \e!less
Example: pipe out only first 10 lines
:1,10w \e!less
.Ed

.It Cm w!
Force write to a file
.It Cm wq x
Write and soft quit
.It Cm wq! x!
Write and force quit
.It Cm u
Undo
.It Cm rd
Redo

.It Cm se
Set a variable
.Bd -literal
Example: set using implications
:se hll
:se nohll
Example: set using exact values
:se hll=1
:se hll=0
.Ed

.It Cm s
Substitute
.Bd -literal
Find and replace text in a range of lines that matches a //
enclosed regex with a // enclosed replacement string.

Example: global replacement
:%s/term1/term2/g

Substitution backreference inserts the text of matched group
specified by \ex where x is group number.

Example: substitution backreference
this is an example text for subs and has int or void
:%s/(int)\e|(void)/pre\e0after
this is an example text for subs and has preintafter or void
:%s/(int)\e|(void)/pre\e2after/g
this is an example text for subs and has prepreafterafter or prevoidafter
.Ed

.It Cm ya
Yank a region
.Bd -literal
To append to the register, pass in its uppercase version.
To append to any of the non-alphabetical registers add any extra
character to the command.
Example: append to register 1
:ya 1x
.Ed

.It Cm ya!
Reset register value

.It Cm !
Run external program
.Bd -literal
When ex range specified, pipes the buffer data to an external
process and pipes the output back into current buffer replacing
the affected range.
Example: infamously sort the buffer
:1,$!sort
.Ed

.It Cm ft
Set a filetype
.Bd -literal
No argument prints the current file type.
Reloads the highlight ft, which makes it possible to reset dynamic
highlights created by options like "hlw".
.Ed

.It Cm cm
Set a keymap
.Bd -literal
No argument prints the current keymap name.
.Ed

.It Cm cm!
Set an alternative keymap

.It Cm fd
Set a secondary directory (stands for file dir)
.Bd -literal
Recalculates the directory listing in b-2 buffer.
No argument implies current directory.
.Ed

.It Cm fp
Set a directory path for :fd (stands for file path)

.It Cm cd
Set a working directory (stands for change dir)
.Bd -literal
Currently open buffers' file paths will be automatically adjusted
to reflect a newly set working directory.
.Ed

.It Cm inc
Include regex for :fd calculation
.Bd -literal
Example: include only files in submodule directory that end with .c
:inc submodule.*\e.c$
Example: exclude the .git and submodule folders
:inc (^[\e!.git\e!submodule]+[^\e/]+$)
No argument disables the filter.
.Ed

.It Cm reg
Print registers and their contents

.It Cm bx
Set max number of buffers allowed
.Bd -literal
Buffers will be deallocated if the number specified is lower
than the number of buffers currently in use.
No argument will reset to the default value of 10.
.Ed

.It Cm ac
Set autocomplete filter regex
.Bd -literal
No argument resets to the default word filter regex as defined
in led.c.
.Ed

.It Cm uc
Toggle multibyte utf-8 decoding
.Bd -literal
This command is particularly useful when editing files with
mixed encodings, binary files, or when the terminal does not
support UTF-8 or lacks the necessary fonts to display UTF-8
characters. Typically to be used along with :ph for the full
effect.
.Ed

.It Cm ph
Create new placeholders
.Bd -literal
Examples:
render 8 bit ascii (Extended ASCII) as '~':
:ph 128 255 1 1~
flawless ISO/IEC 8859-1 (latin-1) support:
:uc|ph 128 160 1 1~
reset to default as in conf.c:
:ph
.Ed
.
.El
.
.Sh EX OPTIONS
.Bl -tag -width Ds -compact
.
.It Cm ai
If set, indent new lines.
.
.It Cm ic
If set, ignore case in regular expressions.

.It Cm ish
Interactive shell
.Bd -literal
Makes every "!" pipe command run through an interactive shell
so that all shell features e.g. aliases work.
.Ed

.It Cm grp
Regex search group
.Bd -literal
Defines a target search group for any regex search operation.
This becomes necessary when the result of regex search is to be based on
some group rather than default match group.

Example: ignore tabs at the beginning of the line
:se grp=2|1,$f/^[	]+(.+)|se nogrp

The value of grp is calculated using (group number * 2).
The default group number is 0.
.Ed

.
.It Cm hl
If set, highlight text based on rules defined in
.Pa conf.c .
.
.It Cm hlr
If set, highlight text in reverse direction.
.
.It Cm hll
If set and defined in hl, highlight current line.
.
.It Cm hlp
If set and defined in hl, highlight [](){} pairs.
.
.It Cm hlw
If set and defined in hl, highlight current word under the cursor.
.
.It Cm led
If unset, all terminal output is disabled.

.It Cm mpt
Control vi prompts
.Bd -literal
When set to 0 after an ex command is called from vi, disables
the "[any key to continue]" prompt.
If mpt is negative, the prompt will remain disabled.
.Ed

.It Cm order
If set, reorder characters based on rules defined in
.Pa conf.c .
.
.It Cm shape
If set, perform Arabic script letter shaping.
.
.It Cm pac
If set, print autocomplete suggestions on the fly.
.
.It Cm tbs
Number of spaces used to represent a tab.
.
.It Cm td
Current text direction context.
This option accepts four meaningful values:
.Bl -tag -width Ds -compact
.It Ar +2
Exclusively left-to-right.
.It Ar +1
Follow
.Va dircontexts[]
(in
.Pa conf.c ) ,
defaulting to left-to-right.
.It Ar -1
Follow
.Va dircontexts[] ,
defaulting to right-to-left.
.It Ar -2
Exclusively right-to-left.
.El

.It Cm pr
Print register
.Bd -literal
Set a special register using a character or a number.
Once the register is set, all data passed into ex_print will
be stored in the register.
If the register is uppercase, new lines are added to match the
exact output that was printed.
Example: paste current buffer list exactly like from :b command
:se pr=A|ya! a|b|pu a
Example: store a line printed with :p
:se pr=A|ya! a|p
.Ed
.
.El
.
.Sh EXINIT ENV VAR
.Bd -literal
EXINIT defines a sequence of vi/ex commands to be performed
at startup. Consequently, this is the primary way for scripting
and customizing nextvi outside of conf.c.
Many standard text processing utils such as grep, awk, sed
can be replaced by nextvi with EXINIT in mind.

Example 1:
There is a dictionary file (assume vi.c), which we always want
to have indexed at startup for autocomplete. The last "bx" commands
delete the vi.c buffer.
export EXINIT=$(printf "e ./vi.c|tp i\ex7|bx 1|bx")

Example 2:
Load some file (assume vi.c) into vi's history buffer.
export EXINIT="b-1|%r ./vi.c|b-1"

Example 3:
Setup a macro in register a@
When @a is executed the macro will create { and closing } below
the cursor leaving cursor in insert mode in between the braces.
export EXINIT=$(printf "e|tp io{\en}\ex16\ex3kA|tp 1G|tp 2\e"ayy")
.Ed
.
.Sh REGEX
Nextvi's regex syntax is akin to that of Plan 9.
.Bl -tag -width Ds -compact
.It Cm \&.
match any single char
.It Cm ^
assert start of the line
.It Cm $
assert end of the line
.It Cm {N,M}
match N to M times
.It Cm ()
grouping
.It Cm (?:)
non capture grouping
.It Cm [N-M]
match ranges N to M
.It Cm *
repeated zero or more times
.It Cm +
repeated one or more times
.It Cm \&|
union, alternative branch
.It Cm \e<
assert beginning of the word
.It Cm \e>
assert end of the word
.It Cm \&?
one or zero matches greedy
.It Cm \&??
one or zero matches lazy
.El

Additionally, Nextvi's supports static lookahead expressions. For example
[!abc] and [=abc] where ! is negated version of =. This will treat "abc" as (a &&
b && c) logically. It is possible to have multiple in one bracket expression as
well. For example [!abc!cda!qwe] where each string delimited by the ! acts like
a typical or operation i.e. [acq] with only difference of testing the extra characters
ahead. To combine both standard bracket expression and lookahead in one, use ^ or
^= where ^ is negated and ^= is default. For example: [!abc^=123] characters after
^= match exactly how [123] would.
.
.Sh SPECIAL MARKS
.Bl -tag -width Ds -compact
.It Cm *
position of the previous change
.It Cm \&[
first line of the previous change
.It Cm \&]
last line of the previous change
.El
.
.Sh SPECIAL REGISTERS
.Bl -tag -width Ds -compact
.It Cm /
previous search keyword
.It Cm \&:
previous ex command
.It Cm 0
previous value of default register (atomic)
.Bd -literal -compact
Atomic means the operation did not include a whole line
and a \en character.
.Ed
.It Cm 1-9
previous value(s) of default register (nonatomic)
.El
.
.Sh CODE MAP
.Bd -literal -compact
+--------------+---------------------+
| 537  kmap.h  | keymap translation  |
| 458  vi.h    | definitions/aux     |
+--------------+---------------------+
| 653  uc.c    | UTF-8 support       |
| 329  term.c  | low level IO        |
| 293  conf.c  | hl/ft/td config     |
| 658  regex.c | extended RE         |
| 601  lbuf.c  | file/line buffer    |
| 1232 ex.c    | ex options/commands |
| 2054 vi.c    | normal mode/general |
| 662  led.c   | insert mode/output  |
| 382  ren.c   | positioning/syntax  |
| 6863 total   | wc -l *.c           |
+--------------+---------------------+
.Ed
.
.Sh COMPILING
.Bl -tag -width Ds -compact
.It Cm export CC='g++ -x c'
set compiler, g++ example
.It Cm export CFLAGS='-s'
set CFLAGS, strip example
.It Cm ./cbuild.sh
Basic build
.It Cm ./cbuild.sh debug
Basic debug build
.It Cm ./cbuild.sh pgobuild
pgobuild which can lead to a significant performance boost on
some application specific tasks.
.It Cm valgrind --tool=cachegrind --cache-sim=yes --branch-sim=yes ./vi vi.c
performance bench test
.El
.
.Sh PHILOSOPHY
.Bd -literal -compact
In most text editors, flexibility is a minor or irrelevant design goal.
Nextvi is designed to be flexible where the editor adapts to the user needs.
This flexibility is achieved by heavily chaining basic commands and allowing
them to create new ones with completely different functionality. Command
reuse keeps the editor small without infringing on your freedom to quickly
get a good grasp on the code. If you want to customize anything, you should
be able to do it using the only core commands or a mix with some specific C
code for more difficult tasks. Simple and flexible design allows for straight
forward solutions to any problem long term and filters bad inconsistent ideas.

.Sy \&"All software sucks, but some do more than others."
.Em 	- Kyryl Melekhin
.Ed
.
.Sh SEE ALSO
.Bd -literal -compact
New functionality can be obtained through optional patches provided in the
patches branch. If you have a meaningful contribution and would love to be
made public the patch can be submitted via email or github pull request.
.Lk https://github.com/kyx0r/nextvi/tree/patches

Resources used to create this manual and contributions to be submitted on
the manual branch.
.Lk https://github.com/kyx0r/nextvi/tree/manual

Q: What is pikevm?
A: Pikevm is a complete rewrite of nextvi's regex engine for the purposes of
getting rid of backtracking and severe performance and memory constraints.
Pikevm guarantees that all regular expressions are computed in constant space
and O(n+k) time where n is size of the string and k is some constant for the
complexity of the regex i.e. number of state transitions. It is important to
understand that it does not mean that we run at O(n) linear speed, but rather
the amount of processing time & memory usage is distributed evenly and linearly
throughout the string, the k constant plays a big role. If you are familiar
with radix sort algorithms this follows the same idea.
Q: What are the other benefits?
A: For example, now it is possible to compute a C comment /* n */ where n can
be an infinite number of characters. Of course this extends to every other
valid regular expression.
Q: New features pikevm supports?
A: Additionally, pikevm supports PCRE style non capture group (?:) and lazy
quantifiers like .*? and .+?? because they were easy to implement and allow
for further regex profiling/optimization.
Q: NFA vs DFA (identify)
A: pikevm = NFA backtrack = DFA
Q: What's wrong with original implementation?
A: Nothing except it being slow and limited. My improved version of Ali's DFA
implementation ran 3.5X faster in any case, however I found a bug with it
where zero quantifier "?" nested groups compute wrong submatch results. To
fix this problem, it would require to undo a lot of optimization work already
done, basically going back to how slow Ali's implementation would be. The reason
this was spotted so late was because this kind of regex wasn't used before,
so I never tested it. Other than that I think submatch extraction is correct
on other cases. Pikevm does not have this bug, so it will be used as main
regex engine from now on, unless dfa ever finds a proper fix. Honestly, this
change isn't so surprising, as I was working on pikevm a few months prior, to
favor a superior algorithm.
You can still find that code here (likely with no updates):
.Lk https://github.com/kyx0r/nextvi/tree/dfa_dead
As a downside, NFA simulation loses the DFA property of being able to
quickly short circuit a match, as everything runs linearly and at constant
speed, incurring match time overhead. Well optimized DFA engine can
outperform pikevm, but that is rather rare as they got problems of their own.
For example as independently benchmarked, dfa_dead runs only 13% faster than
pikevm and that is stretching the limit of what is physically possible on a
table based matcher. Can't cheat mother nature, and if you dare to try she's
unforgiving at best.
Supplementary reading by Russ Cox:
.Lk https://swtch.com/~rsc/regexp/regexp1.html

Original Neatvi repository:
.Lk https://github.com/aligrudi/neatvi
.Ed
.
.Sh AUTHORS
.An -nosplit
.Nm
was written by
.An Kyryl Melekhin Aq Mt k.melekhin@gmail.com .
It is based on
.Xr neatvi 1 Ns ,
which was written by
.An Ali Gholami Rudi Aq Mt ali@rudi.ir .
.\" add more contributors here?
This manual page was inspired by
.An népéta Aq Mt nepeta@canaglie.net
