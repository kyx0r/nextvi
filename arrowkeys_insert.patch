diff --git a/led.c b/led.c
index 4d40f2b..db791b3 100644
--- a/led.c
+++ b/led.c
@@ -282,7 +282,7 @@ static int led_lastword(char *s)
 	return r - s;
 }
 
-static void led_printparts(sbuf *sb, int ps, char *post)
+static void led_printparts(sbuf *sb, int ps, char *post, int print)
 {
 	if (!xled)
 		return;
@@ -298,8 +298,10 @@ static void led_printparts(sbuf *sb, int ps, char *post)
 		xleft = pos - xcols / 2;
 	if (pos < xleft)
 		xleft = pos < xcols ? 0 : pos - xcols / 2;
-	syn_blockhl = 0;
-	led_crender(sb->s+ps, -1, vi_lncol, xleft, xleft + xcols - vi_lncol);
+	if (print) {
+		syn_blockhl = 0;
+		led_crender(sb->s+ps, -1, vi_lncol, xleft, xleft + xcols - vi_lncol);
+	}
 	/* cursor position for inserting the next character */
 	if (next) {
 		if (off - 2 >= 0)
@@ -392,7 +394,8 @@ static void led_line(sbuf *sb, int ps, int pre, char *post, int ai_max,
 	if (!post)
 		post = "";
 	while (1) {
-		led_printparts(sb, ps, post);
+		led_printparts(sb, ps, post, !memchr("ABCD", vi_insmov, 4));
+		vi_insmov = -1;
 		len = sb->s_n;
 		c = term_read();
 		switch (c) {
@@ -576,6 +579,20 @@ static void led_line(sbuf *sb, int ps, int pre, char *post, int ai_max,
 			else
 				led_redraw(sb->s, 0, orow, lsh);
 			continue;
+		case '\033':;	/* Arrow keys */
+			char cbuf[1];
+			cbuf[0] = '\0';
+			int fl = fcntl(STDIN_FILENO, F_GETFL);
+			fcntl(STDIN_FILENO, F_SETFL, fl | O_NONBLOCK);
+			read(STDIN_FILENO, cbuf, 1);
+			if (*cbuf == '[') {
+				read(STDIN_FILENO, cbuf, 1);
+				vi_insmov = *cbuf;
+				fcntl(STDIN_FILENO, F_SETFL, fl);
+				goto _leave;
+			}
+			fcntl(STDIN_FILENO, F_SETFL, fl);
+			goto leave;
 		case TK_CTL('o'):;
 			preserve(int, xvis, xvis & 4 ? xvis & ~4 : xvis | 4)
 			syn_setft(ex_ft);
@@ -598,6 +615,7 @@ static void led_line(sbuf *sb, int ps, int pre, char *post, int ai_max,
 	}
 leave:
 	vi_insmov = c;
+_leave:
 	*key = c;
 }
 
@@ -641,7 +659,7 @@ sbuf *led_input(char *pref, char **post, int *kmap, int row, int lsh)
 			return sb;
 		}
 		sbufn_chr(sb, key)
-		led_printparts(sb, ps, "");
+		led_printparts(sb, ps, "", 1);
 		term_chr('\n');
 		term_room(1);
 		xrow++;
diff --git a/vi.c b/vi.c
index 7fc3e0b..381c076 100644
--- a/vi.c
+++ b/vi.c
@@ -1023,6 +1023,8 @@ static char *vi_indents(char *ln)
 	sbufn_done(sb)
 }
 
+static int lmodified;
+
 static void vi_change(int r1, int o1, int r2, int o2, int lnmode)
 {
 	char *region, *pref, *post, *_post;
@@ -1046,6 +1048,7 @@ static void vi_change(int r1, int o1, int r2, int o2, int lnmode)
 	sbuf_free(rep)
 	free(pref);
 	free(_post);
+	lmodified = 1;
 }
 
 static void vi_case(int r1, int o1, int r2, int o2, int lnmode, int cmd)
@@ -1209,8 +1212,10 @@ static void vc_insert(int cmd)
 		xoff = charcount(rep->s, rep->s_n, post, l2 - (post - _post));
 		if (cmdo && !lbuf_len(xb))
 			lbuf_edit(xb, "\n", 0, 0);
+		lmodified = 1;
 		lbuf_edit(xb, rep->s, row, row + !cmdo);
-	}
+	} else
+		lmodified = 0;
 	sbuf_free(rep)
 	free(pref);
 	free(_post);
@@ -1743,6 +1748,37 @@ void vi(int init)
 				vc_insert(c);
 				ins:
 				vi_mod |= !xpac && xrow == orow ? 8 : 1;
+				switch (vi_insmov) {
+				case 'A':	/* ↑ */
+					vi_back(!lmodified ? c : 'i');
+					if (lmodified)
+						vi_col = vi_off2col(xb, xrow, xoff);
+					xrow--;
+					xrow = xrow < 0 ? 0 : xrow;
+					xoff = vi_col2off(xb, xrow, vi_col);
+					lmodified = 0;
+					goto _break;
+				case 'B':	/* ↓ */
+					vi_back(!lmodified ? c : 'i');
+					if (lmodified)
+						vi_col = vi_off2col(xb, xrow, xoff);
+					xrow++;
+					xoff = vi_col2off(xb, xrow, vi_col);
+					lmodified = 0;
+					goto _break;
+				case 'D':	/* ← */
+					vi_back('i');
+					xoff--;
+					xoff = xoff < 0 ? 0 : xoff;
+					vi_col = vi_off2col(xb, xrow, xoff);
+					goto _break;
+				case 'C':	/* → */
+					vi_back(*uc_chr(lbuf_get(xb, xrow), xoff+2) ? 'i' : 'A');
+					xoff++;
+					if (*uc_chr(lbuf_get(xb, xrow), xoff))
+						vi_col = vi_off2col(xb, xrow, xoff);
+					goto _break;
+				}
 				if (vi_insmov == 127) {
 					if (xrow && !(xoff > 0 && lbuf_eol(xb, xrow))) {
 						xoff = lbuf_eol(xb, --xrow);
@@ -1756,6 +1792,9 @@ void vi(int init)
 					xoff--;
 				xoff = xoff < 0 ? 0 : xoff;
 				break;
+				_break:
+				vi_mod = 0;
+				break;
 			case 'J':
 				vc_join(vi_joinmode, vi_arg1 <= 1 ? 2 : vi_arg1);
 				break;
