diff --git a/lbuf.c b/lbuf.c
index 0649f71..268c77d 100644
--- a/lbuf.c
+++ b/lbuf.c
@@ -248,6 +248,41 @@ int lbuf_jump(struct lbuf *lbuf, int mark, int *pos, int *off)
 	return 0;
 }
 
+int lbuf_undojump(struct lbuf *lb, int *pos, int *off)
+{
+	struct lopt *lo;
+	static int last_hist_u;
+	int hist_u = lb->hist_u;
+	int useq;
+	int rpos = 0;
+	int ret = 0;
+	if (!last_hist_u) {
+		last_hist_u = hist_u;
+		ret = 2;
+	}
+	if (hist_u) {
+		do {
+			lo = &lb->hist[hist_u - 1];
+			useq = lo->seq;
+			while (hist_u && lb->hist[hist_u - 1].seq == useq)
+				lo = &lb->hist[--hist_u];
+		} while (hist_u && hist_u >= last_hist_u);
+		last_hist_u = hist_u;
+		hist_u = lb->hist_u;
+		while (hist_u != last_hist_u) {
+			lo = &lb->hist[--hist_u];
+			if (lb->hist[last_hist_u].pos > lo->pos) {
+				rpos += lo->n_ins;
+				rpos -= lo->n_del;
+			}
+		}
+	} else
+		return ret ? ret : 1;
+	*pos = rpos + lb->hist[last_hist_u].pos;
+	*off = lo->pos_off;
+	return ret;
+}
+
 int lbuf_undo(struct lbuf *lb)
 {
 	if (!lb->hist_u)
diff --git a/vi.c b/vi.c
index 302cafb..ce25a25 100644
--- a/vi.c
+++ b/vi.c
@@ -1548,6 +1548,17 @@ void vi(int init)
 				vi_hidch = !vi_hidch;
 				vi_mod |= 1;
 				break;
+			case TK_CTL('o'):
+				next_hop:
+				if (lbuf_undojump(xb, &xrow, &xoff))
+					snprintf(vi_msg, sizeof(vi_msg), "undo jmp failed");
+				else if (xrow == nrow)
+					goto next_hop;
+				vi_col = vi_off2col(xb, xrow, xoff);
+				xoff = vi_col2off(xb, xrow, vi_col);
+				xtop = MAX(0, xrow - xrows / 2);
+				vi_mod = 1;
+				break;
 			case TK_CTL('v'):
 				vi_arg = (vi_wsel % 5) + !!*vi_word;
 			case TK_CTL('c'):
diff --git a/vi.h b/vi.h
index 5eecfe3..e00c0b6 100644
--- a/vi.h
+++ b/vi.h
@@ -173,6 +173,7 @@ void lbuf_emark(struct lbuf *lb, struct lopt *lo, int beg, int end);
 struct lopt *lbuf_opt(struct lbuf *lb, char *buf, int pos, int n_del, int init);
 void lbuf_mark(struct lbuf *lbuf, int mark, int pos, int off);
 int lbuf_jump(struct lbuf *lbuf, int mark, int *pos, int *off);
+int lbuf_undojump(struct lbuf *lb, int *pos, int *off);
 int lbuf_undo(struct lbuf *lbuf);
 int lbuf_redo(struct lbuf *lbuf);
 int lbuf_modified(struct lbuf *lb);
